

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Thu Jun 04 23:34:40 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    23                           	dabs	1,0x7E,2
    24  0000                     
    25                           ; Version 2.20
    26                           ; Generated 12/02/2020 GMT
    27                           ; 
    28                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC16F877A Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     	;# 
    60  0001                     	;# 
    61  0002                     	;# 
    62  0003                     	;# 
    63  0004                     	;# 
    64  0005                     	;# 
    65  0006                     	;# 
    66  0007                     	;# 
    67  0008                     	;# 
    68  0009                     	;# 
    69  000A                     	;# 
    70  000B                     	;# 
    71  000C                     	;# 
    72  000D                     	;# 
    73  000E                     	;# 
    74  000E                     	;# 
    75  000F                     	;# 
    76  0010                     	;# 
    77  0011                     	;# 
    78  0012                     	;# 
    79  0013                     	;# 
    80  0014                     	;# 
    81  0015                     	;# 
    82  0015                     	;# 
    83  0016                     	;# 
    84  0017                     	;# 
    85  0018                     	;# 
    86  0019                     	;# 
    87  001A                     	;# 
    88  001B                     	;# 
    89  001B                     	;# 
    90  001C                     	;# 
    91  001D                     	;# 
    92  001E                     	;# 
    93  001F                     	;# 
    94  0081                     	;# 
    95  0085                     	;# 
    96  0086                     	;# 
    97  0087                     	;# 
    98  0088                     	;# 
    99  0089                     	;# 
   100  008C                     	;# 
   101  008D                     	;# 
   102  008E                     	;# 
   103  0091                     	;# 
   104  0092                     	;# 
   105  0093                     	;# 
   106  0094                     	;# 
   107  0098                     	;# 
   108  0099                     	;# 
   109  009C                     	;# 
   110  009D                     	;# 
   111  009E                     	;# 
   112  009F                     	;# 
   113  010C                     	;# 
   114  010D                     	;# 
   115  010E                     	;# 
   116  010F                     	;# 
   117  018C                     	;# 
   118  018D                     	;# 
   119  0000                     	;# 
   120  0001                     	;# 
   121  0002                     	;# 
   122  0003                     	;# 
   123  0004                     	;# 
   124  0005                     	;# 
   125  0006                     	;# 
   126  0007                     	;# 
   127  0008                     	;# 
   128  0009                     	;# 
   129  000A                     	;# 
   130  000B                     	;# 
   131  000C                     	;# 
   132  000D                     	;# 
   133  000E                     	;# 
   134  000E                     	;# 
   135  000F                     	;# 
   136  0010                     	;# 
   137  0011                     	;# 
   138  0012                     	;# 
   139  0013                     	;# 
   140  0014                     	;# 
   141  0015                     	;# 
   142  0015                     	;# 
   143  0016                     	;# 
   144  0017                     	;# 
   145  0018                     	;# 
   146  0019                     	;# 
   147  001A                     	;# 
   148  001B                     	;# 
   149  001B                     	;# 
   150  001C                     	;# 
   151  001D                     	;# 
   152  001E                     	;# 
   153  001F                     	;# 
   154  0081                     	;# 
   155  0085                     	;# 
   156  0086                     	;# 
   157  0087                     	;# 
   158  0088                     	;# 
   159  0089                     	;# 
   160  008C                     	;# 
   161  008D                     	;# 
   162  008E                     	;# 
   163  0091                     	;# 
   164  0092                     	;# 
   165  0093                     	;# 
   166  0094                     	;# 
   167  0098                     	;# 
   168  0099                     	;# 
   169  009C                     	;# 
   170  009D                     	;# 
   171  009E                     	;# 
   172  009F                     	;# 
   173  010C                     	;# 
   174  010D                     	;# 
   175  010E                     	;# 
   176  010F                     	;# 
   177  018C                     	;# 
   178  018D                     	;# 
   179                           
   180                           	psect	idataBANK0
   181  04E4                     __pidataBANK0:
   182                           
   183                           ;initializer for _humi
   184  04E4  3452               	retlw	82
   185  04E5  3448               	retlw	72
   186  04E6  3420               	retlw	32
   187  04E7  3420               	retlw	32
   188  04E8  3420               	retlw	32
   189  04E9  343D               	retlw	61
   190  04EA  3420               	retlw	32
   191  04EB  3430               	retlw	48
   192  04EC  3430               	retlw	48
   193  04ED  342E               	retlw	46
   194  04EE  3430               	retlw	48
   195  04EF  3420               	retlw	32
   196  04F0  3425               	retlw	37
   197  04F1  3400               	retlw	0
   198                           
   199                           ;initializer for _temp
   200  04F2  3454               	retlw	84
   201  04F3  3465               	retlw	101
   202  04F4  346D               	retlw	109
   203  04F5  3470               	retlw	112
   204  04F6  3420               	retlw	32
   205  04F7  343D               	retlw	61
   206  04F8  3420               	retlw	32
   207  04F9  3430               	retlw	48
   208  04FA  3430               	retlw	48
   209  04FB  342E               	retlw	46
   210  04FC  3430               	retlw	48
   211  04FD  3420               	retlw	32
   212  04FE  3443               	retlw	67
   213  04FF  3400               	retlw	0
   214  000E                     _TMR1L	set	14
   215  000F                     _TMR1H	set	15
   216  0008                     _PORTD	set	8
   217  0006                     _PORTB	set	6
   218  0043                     _RD3	set	67
   219  0088                     _TRISD	set	136
   220  0086                     _TRISB	set	134
   221  0443                     _TRISD3	set	1091
   222                           
   223                           	psect	strings
   224  0003                     __pstrings:
   225  0003                     stringtab:
   226  0003                     __stringtab:
   227                           
   228                           ;	String table - string pointers are 1 byte each
   229  0003  1BFF               	btfsc	btemp+1,7
   230  0004  280D               	ljmp	stringcode
   231  0005  1383               	bcf	3,7
   232  0006  187F               	btfsc	btemp+1,0
   233  0007  1783               	bsf	3,7
   234  0008  0800               	movf	0,w
   235  0009  0A84               	incf	4,f
   236  000A  1903               	skipnz
   237  000B  0AFF               	incf	btemp+1,f
   238  000C  0008               	return
   239  000D                     stringcode:
   240  000D                     stringdir:
   241  000D  3000               	movlw	high stringdir
   242  000E  008A               	movwf	10
   243  000F  0804               	movf	4,w
   244  0010  0A84               	incf	4,f
   245  0011  0782               	addwf	2,f
   246  0012                     __stringbase:
   247  0012  3400               	retlw	0
   248  0013                     __end_of__stringtab:
   249  0013                     STR_2:
   250  0013  3443               	retlw	67	;'C'
   251  0014  3468               	retlw	104	;'h'
   252  0015  3465               	retlw	101	;'e'
   253  0016  3463               	retlw	99	;'c'
   254  0017  346B               	retlw	107	;'k'
   255  0018  3473               	retlw	115	;'s'
   256  0019  3475               	retlw	117	;'u'
   257  001A  346D               	retlw	109	;'m'
   258  001B  3420               	retlw	32	;' '
   259  001C  3445               	retlw	69	;'E'
   260  001D  3472               	retlw	114	;'r'
   261  001E  3472               	retlw	114	;'r'
   262  001F  346F               	retlw	111	;'o'
   263  0020  3472               	retlw	114	;'r'
   264  0021  3421               	retlw	33	;'!'
   265  0022  3400               	retlw	0
   266  0023                     STR_3:
   267  0023  344E               	retlw	78	;'N'
   268  0024  346F               	retlw	111	;'o'
   269  0025  3420               	retlw	32	;' '
   270  0026  3452               	retlw	82	;'R'
   271  0027  3465               	retlw	101	;'e'
   272  0028  3473               	retlw	115	;'s'
   273  0029  3470               	retlw	112	;'p'
   274  002A  346F               	retlw	111	;'o'
   275  002B  346E               	retlw	110	;'n'
   276  002C  3473               	retlw	115	;'s'
   277  002D  3465               	retlw	101	;'e'
   278  002E  3400               	retlw	0
   279  002F                     STR_1:
   280  002F  3454               	retlw	84	;'T'
   281  0030  3469               	retlw	105	;'i'
   282  0031  346D               	retlw	109	;'m'
   283  0032  3465               	retlw	101	;'e'
   284  0033  3420               	retlw	32	;' '
   285  0034  346F               	retlw	111	;'o'
   286  0035  3475               	retlw	117	;'u'
   287  0036  3474               	retlw	116	;'t'
   288  0037  3421               	retlw	33	;'!'
   289  0038  3400               	retlw	0
   290                           
   291                           	psect	cinit
   292  07E7                     start_initialization:	
   293                           ; #config settings
   294                           
   295  07E7                     __initialization:
   296                           
   297                           ; Initialize objects allocated to BANK0
   298  07E7  1383               	bcf	3,7	;select IRP bank0
   299  07E8  303C               	movlw	low (__pdataBANK0+28)
   300  07E9  00FD               	movwf	btemp+-1
   301  07EA  3004               	movlw	high __pidataBANK0
   302  07EB  00FE               	movwf	btemp
   303  07EC  30E4               	movlw	low __pidataBANK0
   304  07ED  00FF               	movwf	btemp+1
   305  07EE  3020               	movlw	low __pdataBANK0
   306  07EF  0084               	movwf	4
   307  07F0  120A  118A  249F  120A  118A  	fcall	init_ram0
   308                           
   309                           ; Clear objects allocated to BANK0
   310  07F5  01C6               	clrf	__pbssBANK0& (0+127)
   311  07F6  01C7               	clrf	(__pbssBANK0+1)& (0+127)
   312                           
   313                           ; Clear objects allocated to COMMON
   314  07F7  01F8               	clrf	__pbssCOMMON& (0+127)
   315  07F8  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   316  07F9  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   317  07FA  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
   318  07FB  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
   319  07FC                     end_of_initialization:	
   320                           ;End of C runtime variable initialization code
   321                           
   322  07FC                     __end_of__initialization:
   323  07FC  0183               	clrf	3
   324  07FD  120A  118A  2E6D   	ljmp	_main	;jump to C main() function
   325                           
   326                           	psect	bssCOMMON
   327  0078                     __pbssCOMMON:
   328  0078                     _check_sum:
   329  0078                     	ds	1
   330  0079                     _rh_byte2:
   331  0079                     	ds	1
   332  007A                     _rh_byte1:
   333  007A                     	ds	1
   334  007B                     _t_byte2:
   335  007B                     	ds	1
   336  007C                     _t_byte1:
   337  007C                     	ds	1
   338                           
   339                           	psect	bssBANK0
   340  0046                     __pbssBANK0:
   341  0046                     _time_out:
   342  0046                     	ds	2
   343                           
   344                           	psect	dataBANK0
   345  0020                     __pdataBANK0:
   346  0020                     _humi:
   347  0020                     	ds	14
   348  002E                     _temp:
   349  002E                     	ds	14
   350                           
   351                           	psect	inittext
   352  049B                     init_fetch0:	
   353                           ;	Called with low address in FSR and high address in W
   354                           
   355  049B  087E               	movf	btemp,w
   356  049C  008A               	movwf	10
   357  049D  087F               	movf	btemp+1,w
   358  049E  0082               	movwf	2
   359  049F                     init_ram0:	
   360                           ;Called with:
   361                           ;	high address of idata address in btemp 
   362                           ;	low address of idata address in btemp+1 
   363                           ;	low address of data in FSR
   364                           ;	high address + 1 of data in btemp-1
   365                           
   366  049F  120A  118A  249B  120A  118A  	fcall	init_fetch0
   367  04A4  0080               	movwf	0
   368  04A5  0A84               	incf	4,f
   369  04A6  0804               	movf	4,w
   370  04A7  067D               	xorwf	btemp+-1,w
   371  04A8  1903               	btfsc	3,2
   372  04A9  3400               	retlw	0
   373  04AA  0AFF               	incf	btemp+1,f
   374  04AB  1903               	btfsc	3,2
   375  04AC  0AFE               	incf	btemp,f
   376  04AD  2C9F               	goto	init_ram0
   377                           
   378                           	psect	cstackCOMMON
   379  0070                     __pcstackCOMMON:
   380  0070                     ?_checkResponse:
   381  0070                     ?_readData:	
   382                           ; 1 bit 
   383                           
   384  0070                     ?_LcdCmdWrite:	
   385                           ; 1 bit 
   386                           
   387  0070                     ??_LcdCmdWrite:	
   388                           ; 1 bytes @ 0x0
   389                           
   390  0070                     ?_LcdDataWrite:	
   391                           ; 1 bytes @ 0x0
   392                           
   393  0070                     ??_LcdDataWrite:	
   394                           ; 1 bytes @ 0x0
   395                           
   396  0070                     ?_startSignal:	
   397                           ; 1 bytes @ 0x0
   398                           
   399  0070                     ??_startSignal:	
   400                           ; 1 bytes @ 0x0
   401                           
   402  0070                     ??_checkResponse:	
   403                           ; 1 bytes @ 0x0
   404                           
   405  0070                     ??_readData:	
   406                           ; 1 bytes @ 0x0
   407                           
   408  0070                     ?_main:	
   409                           ; 1 bytes @ 0x0
   410                           
   411  0070                     ?___awdiv:	
   412                           ; 1 bytes @ 0x0
   413                           
   414  0070                     ?___awmod:	
   415                           ; 2 bytes @ 0x0
   416                           
   417  0070                     ___awdiv@divisor:	
   418                           ; 2 bytes @ 0x0
   419                           
   420  0070                     ___awmod@divisor:	
   421                           ; 2 bytes @ 0x0
   422                           
   423                           
   424                           ; 2 bytes @ 0x0
   425  0070                     	ds	1
   426  0071                     readData@i:
   427                           
   428                           ; 1 bytes @ 0x1
   429  0071                     	ds	1
   430  0072                     LcdCmdWrite@cmd:
   431  0072                     LcdDataWrite@data:	
   432                           ; 1 bytes @ 0x2
   433                           
   434  0072                     readData@dht_data:	
   435                           ; 1 bytes @ 0x2
   436                           
   437  0072                     ___awdiv@dividend:	
   438                           ; 1 bytes @ 0x2
   439                           
   440  0072                     ___awmod@dividend:	
   441                           ; 2 bytes @ 0x2
   442                           
   443                           
   444                           ; 2 bytes @ 0x2
   445  0072                     	ds	1
   446  0073                     ?_LcdPrint:
   447  0073                     LcdPrint@message:	
   448                           ; 1 bytes @ 0x3
   449                           
   450                           
   451                           ; 2 bytes @ 0x3
   452  0073                     	ds	1
   453  0074                     ??___awdiv:
   454  0074                     ??___awmod:	
   455                           ; 1 bytes @ 0x4
   456                           
   457  0074                     ___awdiv@counter:	
   458                           ; 1 bytes @ 0x4
   459                           
   460  0074                     ___awmod@counter:	
   461                           ; 1 bytes @ 0x4
   462                           
   463                           
   464                           ; 1 bytes @ 0x4
   465  0074                     	ds	1
   466  0075                     ??_LcdPrint:
   467  0075                     LcdPrint@i:	
   468                           ; 1 bytes @ 0x5
   469                           
   470  0075                     ___awdiv@sign:	
   471                           ; 1 bytes @ 0x5
   472                           
   473  0075                     ___awmod@sign:	
   474                           ; 1 bytes @ 0x5
   475                           
   476                           
   477                           ; 1 bytes @ 0x5
   478  0075                     	ds	1
   479  0076                     ___awdiv@quotient:
   480                           
   481                           ; 2 bytes @ 0x6
   482  0076                     	ds	2
   483                           
   484                           	psect	cstackBANK0
   485  003C                     __pcstackBANK0:
   486  003C                     ??_main:
   487                           
   488                           ; 1 bytes @ 0x0
   489  003C                     	ds	10
   490                           
   491                           	psect	maintext
   492  066D                     __pmaintext:	
   493 ;;
   494 ;;Main: autosize = 0, tempsize = 10, incstack = 0, save=0
   495 ;;
   496 ;; *************** function _main *****************
   497 ;; Defined at:
   498 ;;		line 145 in file "main.c"
   499 ;; Parameters:    Size  Location     Type
   500 ;;		None
   501 ;; Auto vars:     Size  Location     Type
   502 ;;		None
   503 ;; Return value:  Size  Location     Type
   504 ;;                  1    wreg      void 
   505 ;; Registers used:
   506 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   507 ;; Tracked objects:
   508 ;;		On entry : B00/0
   509 ;;		On exit  : 0/0
   510 ;;		Unchanged: 0/0
   511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   512 ;;      Params:         0       0       0       0       0
   513 ;;      Locals:         0       0       0       0       0
   514 ;;      Temps:          0      10       0       0       0
   515 ;;      Totals:         0      10       0       0       0
   516 ;;Total ram usage:       10 bytes
   517 ;; Hardware stack levels required when called:    2
   518 ;; This function calls:
   519 ;;		_LcdCmdWrite
   520 ;;		_LcdPrint
   521 ;;		___awdiv
   522 ;;		___awmod
   523 ;;		_checkResponse
   524 ;;		_readData
   525 ;;		_startSignal
   526 ;; This function is called by:
   527 ;;		Startup code after reset
   528 ;; This function uses a non-reentrant model
   529 ;;
   530                           
   531                           
   532                           ;psect for function _main
   533  066D                     _main:
   534  066D                     l1068:	
   535                           ;incstack = 0
   536                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   537                           
   538                           
   539                           ;main.c: 148:     TRISB = 0x00;
   540  066D  1683               	bsf	3,5	;RP0=1, select bank1
   541  066E  1303               	bcf	3,6	;RP1=0, select bank1
   542  066F  0186               	clrf	6	;volatile
   543                           
   544                           ;main.c: 149:     TRISD = 0x00;
   545  0670  0188               	clrf	8	;volatile
   546  0671                     l1070:
   547                           
   548                           ;main.c: 151:     LcdCmdWrite(0x38);
   549  0671  3038               	movlw	56
   550  0672  120A  118A  251D  120A  118A  	fcall	_LcdCmdWrite
   551  0677                     l1072:
   552                           
   553                           ;main.c: 152:     LcdCmdWrite(0x0E);
   554  0677  300E               	movlw	14
   555  0678  120A  118A  251D  120A  118A  	fcall	_LcdCmdWrite
   556  067D                     l1074:
   557                           
   558                           ;main.c: 155:     {;main.c: 156:         startSignal();
   559  067D  120A  118A  24C9  120A  118A  	fcall	_startSignal
   560  0682                     l1076:
   561                           
   562                           ;main.c: 157:         if(checkResponse())
   563  0682  120A  118A  2500  120A  118A  	fcall	_checkResponse
   564  0687  1C03               	btfss	3,0
   565  0688  2E8A               	goto	u661
   566  0689  2E8B               	goto	u660
   567  068A                     u661:
   568  068A  2FC0               	goto	l1110
   569  068B                     u660:
   570  068B                     l1078:
   571                           
   572                           ;main.c: 158:         {;main.c: 160:             if(readData(&rh_byte1) || readData(&rh_
      +                          byte2) || readData(&t_byte1)
   573  068B  307A               	movlw	(low (_rh_byte1| 0))& (0+255)
   574  068C  120A  118A  2566  120A  118A  	fcall	_readData
   575  0691  1803               	btfsc	3,0
   576  0692  2E94               	goto	u671
   577  0693  2E95               	goto	u670
   578  0694                     u671:
   579  0694  2EBD               	goto	l1088
   580  0695                     u670:
   581  0695                     l1080:
   582  0695  3079               	movlw	(low (_rh_byte2| 0))& (0+255)
   583  0696  120A  118A  2566  120A  118A  	fcall	_readData
   584  069B  1803               	btfsc	3,0
   585  069C  2E9E               	goto	u681
   586  069D  2E9F               	goto	u680
   587  069E                     u681:
   588  069E  2EBD               	goto	l1088
   589  069F                     u680:
   590  069F                     l1082:
   591  069F  307C               	movlw	(low (_t_byte1| 0))& (0+255)
   592  06A0  120A  118A  2566  120A  118A  	fcall	_readData
   593  06A5  1803               	btfsc	3,0
   594  06A6  2EA8               	goto	u691
   595  06A7  2EA9               	goto	u690
   596  06A8                     u691:
   597  06A8  2EBD               	goto	l1088
   598  06A9                     u690:
   599  06A9                     l1084:
   600  06A9  307B               	movlw	(low (_t_byte2| 0))& (0+255)
   601  06AA  120A  118A  2566  120A  118A  	fcall	_readData
   602  06AF  1803               	btfsc	3,0
   603  06B0  2EB2               	goto	u701
   604  06B1  2EB3               	goto	u700
   605  06B2                     u701:
   606  06B2  2EBD               	goto	l1088
   607  06B3                     u700:
   608  06B3                     l1086:
   609  06B3  3078               	movlw	(low (_check_sum| 0))& (0+255)
   610  06B4  120A  118A  2566  120A  118A  	fcall	_readData
   611  06B9  1C03               	btfss	3,0
   612  06BA  2EBC               	goto	u711
   613  06BB  2EBD               	goto	u710
   614  06BC                     u711:
   615  06BC  2ED3               	goto	l1092
   616  06BD                     u710:
   617  06BD                     l1088:
   618                           
   619                           ;main.c: 162:             {;main.c: 163:                 LcdCmdWrite(0x01);
   620  06BD  3001               	movlw	1
   621  06BE  120A  118A  251D  120A  118A  	fcall	_LcdCmdWrite
   622                           
   623                           ;main.c: 164:                 LcdCmdWrite(0x80);
   624  06C3  3080               	movlw	128
   625  06C4  120A  118A  251D  120A  118A  	fcall	_LcdCmdWrite
   626  06C9                     l1090:
   627                           
   628                           ;main.c: 165:                 LcdPrint("Time out!");
   629  06C9  301D               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   630  06CA  00F3               	movwf	LcdPrint@message
   631  06CB  3080               	movlw	128
   632  06CC  00F4               	movwf	LcdPrint@message+1
   633  06CD  120A  118A  253B  120A  118A  	fcall	_LcdPrint
   634                           
   635                           ;main.c: 166:             }
   636  06D2  2FD5               	goto	l1114
   637  06D3                     l1092:
   638                           
   639                           ;main.c: 168:             {;main.c: 169:                 if(check_sum == ((rh_byte1 + rh
      +                          _byte2 + t_byte1 + t_byte2) & 0xFF))
   640  06D3  087A               	movf	_rh_byte1,w
   641  06D4  0779               	addwf	_rh_byte2,w
   642  06D5  1283               	bcf	3,5	;RP0=0, select bank0
   643  06D6  1303               	bcf	3,6	;RP1=0, select bank0
   644  06D7  00BC               	movwf	??_main
   645  06D8  01BD               	clrf	??_main+1
   646  06D9  0DBD               	rlf	??_main+1,f
   647  06DA  087C               	movf	_t_byte1,w
   648  06DB  073C               	addwf	??_main,w
   649  06DC  00BE               	movwf	??_main+2
   650  06DD  3000               	movlw	0
   651  06DE  1803               	skipnc
   652  06DF  3001               	movlw	1
   653  06E0  073D               	addwf	??_main+1,w
   654  06E1  00BF               	movwf	??_main+3
   655  06E2  087B               	movf	_t_byte2,w
   656  06E3  073E               	addwf	??_main+2,w
   657  06E4  00C0               	movwf	??_main+4
   658  06E5  3000               	movlw	0
   659  06E6  1803               	skipnc
   660  06E7  3001               	movlw	1
   661  06E8  073F               	addwf	??_main+3,w
   662  06E9  00C1               	movwf	??_main+5
   663  06EA  30FF               	movlw	255
   664  06EB  0540               	andwf	??_main+4,w
   665  06EC  00C2               	movwf	??_main+6
   666  06ED  3000               	movlw	0
   667  06EE  0541               	andwf	??_main+5,w
   668  06EF  00C3               	movwf	??_main+7
   669  06F0  0878               	movf	_check_sum,w
   670  06F1  00C4               	movwf	??_main+8
   671  06F2  01C5               	clrf	??_main+9
   672  06F3  0843               	movf	??_main+7,w
   673  06F4  0645               	xorwf	??_main+9,w
   674  06F5  1D03               	skipz
   675  06F6  2EF9               	goto	u725
   676  06F7  0842               	movf	??_main+6,w
   677  06F8  0644               	xorwf	??_main+8,w
   678  06F9                     u725:
   679  06F9  1D03               	skipz
   680  06FA  2EFC               	goto	u721
   681  06FB  2EFD               	goto	u720
   682  06FC                     u721:
   683  06FC  2FAA               	goto	l1106
   684  06FD                     u720:
   685  06FD                     l1094:
   686                           
   687                           ;main.c: 170:                 {;main.c: 171:                     temp[7] = t_byte1 / 10 
      +                          + 48;
   688  06FD  300A               	movlw	10
   689  06FE  00F0               	movwf	___awdiv@divisor
   690  06FF  3000               	movlw	0
   691  0700  00F1               	movwf	___awdiv@divisor+1
   692  0701  087C               	movf	_t_byte1,w
   693  0702  00BC               	movwf	??_main
   694  0703  01BD               	clrf	??_main+1
   695  0704  083C               	movf	??_main,w
   696  0705  00F2               	movwf	___awdiv@dividend
   697  0706  083D               	movf	??_main+1,w
   698  0707  00F3               	movwf	___awdiv@dividend+1
   699  0708  120A  118A  2606  120A  118A  	fcall	___awdiv
   700  070D  0870               	movf	?___awdiv,w
   701  070E  3E30               	addlw	48
   702  070F  00FF               	movwf	btemp+1
   703  0710  087F               	movf	btemp+1,w
   704  0711  1283               	bcf	3,5	;RP0=0, select bank0
   705  0712  1303               	bcf	3,6	;RP1=0, select bank0
   706  0713  00B5               	movwf	_temp+7
   707                           
   708                           ;main.c: 172:                     temp[8] = t_byte1 % 10 + 48;
   709  0714  300A               	movlw	10
   710  0715  00F0               	movwf	___awmod@divisor
   711  0716  3000               	movlw	0
   712  0717  00F1               	movwf	___awmod@divisor+1
   713  0718  087C               	movf	_t_byte1,w
   714  0719  00BC               	movwf	??_main
   715  071A  01BD               	clrf	??_main+1
   716  071B  083C               	movf	??_main,w
   717  071C  00F2               	movwf	___awmod@dividend
   718  071D  083D               	movf	??_main+1,w
   719  071E  00F3               	movwf	___awmod@dividend+1
   720  071F  120A  118A  25AD  120A  118A  	fcall	___awmod
   721  0724  0870               	movf	?___awmod,w
   722  0725  3E30               	addlw	48
   723  0726  00FF               	movwf	btemp+1
   724  0727  087F               	movf	btemp+1,w
   725  0728  1283               	bcf	3,5	;RP0=0, select bank0
   726  0729  1303               	bcf	3,6	;RP1=0, select bank0
   727  072A  00B6               	movwf	_temp+8
   728                           
   729                           ;main.c: 173:                     temp[10] = t_byte2 / 10 + 48;
   730  072B  300A               	movlw	10
   731  072C  00F0               	movwf	___awdiv@divisor
   732  072D  3000               	movlw	0
   733  072E  00F1               	movwf	___awdiv@divisor+1
   734  072F  087B               	movf	_t_byte2,w
   735  0730  00BC               	movwf	??_main
   736  0731  01BD               	clrf	??_main+1
   737  0732  083C               	movf	??_main,w
   738  0733  00F2               	movwf	___awdiv@dividend
   739  0734  083D               	movf	??_main+1,w
   740  0735  00F3               	movwf	___awdiv@dividend+1
   741  0736  120A  118A  2606  120A  118A  	fcall	___awdiv
   742  073B  0870               	movf	?___awdiv,w
   743  073C  3E30               	addlw	48
   744  073D  00FF               	movwf	btemp+1
   745  073E  087F               	movf	btemp+1,w
   746  073F  1283               	bcf	3,5	;RP0=0, select bank0
   747  0740  1303               	bcf	3,6	;RP1=0, select bank0
   748  0741  00B8               	movwf	_temp+10
   749                           
   750                           ;main.c: 175:                     humi[7] = rh_byte1 / 10 + 48;
   751  0742  300A               	movlw	10
   752  0743  00F0               	movwf	___awdiv@divisor
   753  0744  3000               	movlw	0
   754  0745  00F1               	movwf	___awdiv@divisor+1
   755  0746  087A               	movf	_rh_byte1,w
   756  0747  00BC               	movwf	??_main
   757  0748  01BD               	clrf	??_main+1
   758  0749  083C               	movf	??_main,w
   759  074A  00F2               	movwf	___awdiv@dividend
   760  074B  083D               	movf	??_main+1,w
   761  074C  00F3               	movwf	___awdiv@dividend+1
   762  074D  120A  118A  2606  120A  118A  	fcall	___awdiv
   763  0752  0870               	movf	?___awdiv,w
   764  0753  3E30               	addlw	48
   765  0754  00FF               	movwf	btemp+1
   766  0755  087F               	movf	btemp+1,w
   767  0756  1283               	bcf	3,5	;RP0=0, select bank0
   768  0757  1303               	bcf	3,6	;RP1=0, select bank0
   769  0758  00A7               	movwf	_humi+7
   770                           
   771                           ;main.c: 176:                     humi[8] = rh_byte1 % 10 + 48;
   772  0759  300A               	movlw	10
   773  075A  00F0               	movwf	___awmod@divisor
   774  075B  3000               	movlw	0
   775  075C  00F1               	movwf	___awmod@divisor+1
   776  075D  087A               	movf	_rh_byte1,w
   777  075E  00BC               	movwf	??_main
   778  075F  01BD               	clrf	??_main+1
   779  0760  083C               	movf	??_main,w
   780  0761  00F2               	movwf	___awmod@dividend
   781  0762  083D               	movf	??_main+1,w
   782  0763  00F3               	movwf	___awmod@dividend+1
   783  0764  120A  118A  25AD  120A  118A  	fcall	___awmod
   784  0769  0870               	movf	?___awmod,w
   785  076A  3E30               	addlw	48
   786  076B  00FF               	movwf	btemp+1
   787  076C  087F               	movf	btemp+1,w
   788  076D  1283               	bcf	3,5	;RP0=0, select bank0
   789  076E  1303               	bcf	3,6	;RP1=0, select bank0
   790  076F  00A8               	movwf	_humi+8
   791                           
   792                           ;main.c: 177:                     humi[10] = rh_byte2 / 10 + 48;
   793  0770  300A               	movlw	10
   794  0771  00F0               	movwf	___awdiv@divisor
   795  0772  3000               	movlw	0
   796  0773  00F1               	movwf	___awdiv@divisor+1
   797  0774  0879               	movf	_rh_byte2,w
   798  0775  00BC               	movwf	??_main
   799  0776  01BD               	clrf	??_main+1
   800  0777  083C               	movf	??_main,w
   801  0778  00F2               	movwf	___awdiv@dividend
   802  0779  083D               	movf	??_main+1,w
   803  077A  00F3               	movwf	___awdiv@dividend+1
   804  077B  120A  118A  2606  120A  118A  	fcall	___awdiv
   805  0780  0870               	movf	?___awdiv,w
   806  0781  3E30               	addlw	48
   807  0782  00FF               	movwf	btemp+1
   808  0783  087F               	movf	btemp+1,w
   809  0784  1283               	bcf	3,5	;RP0=0, select bank0
   810  0785  1303               	bcf	3,6	;RP1=0, select bank0
   811  0786  00AA               	movwf	_humi+10
   812  0787                     l1096:
   813                           
   814                           ;main.c: 178:                     temp[11] = 223;
   815  0787  30DF               	movlw	223
   816  0788  00FF               	movwf	btemp+1
   817  0789  087F               	movf	btemp+1,w
   818  078A  00B9               	movwf	_temp+11
   819  078B                     l1098:
   820                           
   821                           ;main.c: 180:                     LcdCmdWrite(0x80);
   822  078B  3080               	movlw	128
   823  078C  120A  118A  251D  120A  118A  	fcall	_LcdCmdWrite
   824  0791                     l1100:
   825                           
   826                           ;main.c: 181:                     LcdPrint(temp);
   827  0791  302E               	movlw	(low (_temp| 0))& (0+255)
   828  0792  00F3               	movwf	LcdPrint@message
   829  0793  3000               	movlw	0
   830  0794  00F4               	movwf	LcdPrint@message+1
   831  0795  120A  118A  253B  120A  118A  	fcall	_LcdPrint
   832  079A                     l1102:
   833                           
   834                           ;main.c: 183:                     LcdCmdWrite(0xC0);
   835  079A  30C0               	movlw	192
   836  079B  120A  118A  251D  120A  118A  	fcall	_LcdCmdWrite
   837  07A0                     l1104:
   838                           
   839                           ;main.c: 184:                     LcdPrint(humi);
   840  07A0  3020               	movlw	(low (_humi| 0))& (0+255)
   841  07A1  00F3               	movwf	LcdPrint@message
   842  07A2  3000               	movlw	0
   843  07A3  00F4               	movwf	LcdPrint@message+1
   844  07A4  120A  118A  253B  120A  118A  	fcall	_LcdPrint
   845                           
   846                           ;main.c: 185:                 }
   847  07A9  2FD5               	goto	l1114
   848  07AA                     l1106:
   849                           
   850                           ;main.c: 187:                 {;main.c: 188:                     LcdCmdWrite(0x01);
   851  07AA  3001               	movlw	1
   852  07AB  120A  118A  251D  120A  118A  	fcall	_LcdCmdWrite
   853                           
   854                           ;main.c: 189:                     LcdCmdWrite(0x80);
   855  07B0  3080               	movlw	128
   856  07B1  120A  118A  251D  120A  118A  	fcall	_LcdCmdWrite
   857  07B6                     l1108:
   858                           
   859                           ;main.c: 190:                     LcdPrint("Checksum Error!");
   860  07B6  3001               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   861  07B7  00F3               	movwf	LcdPrint@message
   862  07B8  3080               	movlw	128
   863  07B9  00F4               	movwf	LcdPrint@message+1
   864  07BA  120A  118A  253B  120A  118A  	fcall	_LcdPrint
   865  07BF  2FD5               	goto	l1114
   866  07C0                     l1110:
   867                           
   868                           ;main.c: 196:         {;main.c: 197:             LcdCmdWrite(0x01);
   869  07C0  3001               	movlw	1
   870  07C1  120A  118A  251D  120A  118A  	fcall	_LcdCmdWrite
   871                           
   872                           ;main.c: 198:             LcdCmdWrite(0x80);
   873  07C6  3080               	movlw	128
   874  07C7  120A  118A  251D  120A  118A  	fcall	_LcdCmdWrite
   875  07CC                     l1112:
   876                           
   877                           ;main.c: 199:             LcdPrint("No Response");
   878  07CC  3011               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   879  07CD  00F3               	movwf	LcdPrint@message
   880  07CE  3080               	movlw	128
   881  07CF  00F4               	movwf	LcdPrint@message+1
   882  07D0  120A  118A  253B  120A  118A  	fcall	_LcdPrint
   883  07D5                     l1114:
   884                           
   885                           ;main.c: 201:         _delay((unsigned long)((1000)*(8000000/4000.0)));
   886  07D5  300B               	movlw	11
   887  07D6  1283               	bcf	3,5	;RP0=0, select bank0
   888  07D7  1303               	bcf	3,6	;RP1=0, select bank0
   889  07D8  00BE               	movwf	??_main+2
   890  07D9  3026               	movlw	38
   891  07DA  00BD               	movwf	??_main+1
   892  07DB  305D               	movlw	93
   893  07DC  00BC               	movwf	??_main
   894  07DD                     u737:
   895  07DD  0BBC               	decfsz	??_main,f
   896  07DE  2FDD               	goto	u737
   897  07DF  0BBD               	decfsz	??_main+1,f
   898  07E0  2FDD               	goto	u737
   899  07E1  0BBE               	decfsz	??_main+2,f
   900  07E2  2FDD               	goto	u737
   901  07E3  2E7D               	goto	l1074
   902  07E4  120A  118A  2800   	ljmp	start
   903  07E7                     __end_of_main:
   904                           
   905                           	psect	text1
   906  04C9                     __ptext1:	
   907 ;; *************** function _startSignal *****************
   908 ;; Defined at:
   909 ;;		line 90 in file "main.c"
   910 ;; Parameters:    Size  Location     Type
   911 ;;		None
   912 ;; Auto vars:     Size  Location     Type
   913 ;;		None
   914 ;; Return value:  Size  Location     Type
   915 ;;                  1    wreg      void 
   916 ;; Registers used:
   917 ;;		wreg
   918 ;; Tracked objects:
   919 ;;		On entry : 0/0
   920 ;;		On exit  : 0/0
   921 ;;		Unchanged: 0/0
   922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   923 ;;      Params:         0       0       0       0       0
   924 ;;      Locals:         0       0       0       0       0
   925 ;;      Temps:          2       0       0       0       0
   926 ;;      Totals:         2       0       0       0       0
   927 ;;Total ram usage:        2 bytes
   928 ;; Hardware stack levels used:    1
   929 ;; This function calls:
   930 ;;		Nothing
   931 ;; This function is called by:
   932 ;;		_main
   933 ;; This function uses a non-reentrant model
   934 ;;
   935                           
   936                           
   937                           ;psect for function _startSignal
   938  04C9                     _startSignal:
   939  04C9                     l924:	
   940                           ;incstack = 0
   941                           ; Regs used in _startSignal: [wreg]
   942                           
   943                           
   944                           ;main.c: 92:     TRISD3 = 0;
   945  04C9  1683               	bsf	3,5	;RP0=1, select bank1
   946  04CA  1303               	bcf	3,6	;RP1=0, select bank1
   947  04CB  1188               	bcf	8,3	;volatile
   948                           
   949                           ;main.c: 93:     RD3 = 0;
   950  04CC  1283               	bcf	3,5	;RP0=0, select bank0
   951  04CD  1303               	bcf	3,6	;RP1=0, select bank0
   952  04CE  1188               	bcf	8,3	;volatile
   953  04CF                     l926:
   954                           
   955                           ;main.c: 95:     _delay((unsigned long)((25)*(8000000/4000.0)));
   956  04CF  3041               	movlw	65
   957  04D0  00F1               	movwf	??_startSignal+1
   958  04D1  30EE               	movlw	238
   959  04D2  00F0               	movwf	??_startSignal
   960  04D3                     u747:
   961  04D3  0BF0               	decfsz	??_startSignal,f
   962  04D4  2CD3               	goto	u747
   963  04D5  0BF1               	decfsz	??_startSignal+1,f
   964  04D6  2CD3               	goto	u747
   965  04D7  0000               	nop
   966  04D8                     l928:
   967                           
   968                           ;main.c: 96:     RD3 = 1;
   969  04D8  1283               	bcf	3,5	;RP0=0, select bank0
   970  04D9  1303               	bcf	3,6	;RP1=0, select bank0
   971  04DA  1588               	bsf	8,3	;volatile
   972                           
   973                           ;main.c: 97:     _delay((unsigned long)((30)*(8000000/4000000.0)));
   974  04DB  3013               	movlw	19
   975  04DC  00F0               	movwf	??_startSignal
   976  04DD                     u757:
   977  04DD  0BF0               	decfsz	??_startSignal,f
   978  04DE  2CDD               	goto	u757
   979  04DF  2CE0               	nop2
   980  04E0                     l930:
   981                           
   982                           ;main.c: 98:     TRISD3 = 1;
   983  04E0  1683               	bsf	3,5	;RP0=1, select bank1
   984  04E1  1303               	bcf	3,6	;RP1=0, select bank1
   985  04E2  1588               	bsf	8,3	;volatile
   986  04E3                     l49:
   987  04E3  0008               	return
   988  04E4                     __end_of_startSignal:
   989                           
   990                           	psect	text2
   991  0566                     __ptext2:	
   992 ;; *************** function _readData *****************
   993 ;; Defined at:
   994 ;;		line 118 in file "main.c"
   995 ;; Parameters:    Size  Location     Type
   996 ;;  dht_data        1    wreg     PTR unsigned char 
   997 ;;		 -> check_sum(1), t_byte2(1), t_byte1(1), rh_byte2(1), 
   998 ;;		 -> rh_byte1(1), 
   999 ;; Auto vars:     Size  Location     Type
  1000 ;;  dht_data        1    2[COMMON] PTR unsigned char 
  1001 ;;		 -> check_sum(1), t_byte2(1), t_byte1(1), rh_byte2(1), 
  1002 ;;		 -> rh_byte1(1), 
  1003 ;;  i               1    1[COMMON] unsigned char 
  1004 ;; Return value:  Size  Location     Type
  1005 ;;		None               void
  1006 ;; Registers used:
  1007 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1008 ;; Tracked objects:
  1009 ;;		On entry : 0/0
  1010 ;;		On exit  : 0/0
  1011 ;;		Unchanged: 0/0
  1012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1013 ;;      Params:         0       0       0       0       0
  1014 ;;      Locals:         2       0       0       0       0
  1015 ;;      Temps:          1       0       0       0       0
  1016 ;;      Totals:         3       0       0       0       0
  1017 ;;Total ram usage:        3 bytes
  1018 ;; Hardware stack levels used:    1
  1019 ;; This function calls:
  1020 ;;		Nothing
  1021 ;; This function is called by:
  1022 ;;		_main
  1023 ;; This function uses a non-reentrant model
  1024 ;;
  1025                           
  1026                           
  1027                           ;psect for function _readData
  1028  0566                     _readData:
  1029                           
  1030                           ;incstack = 0
  1031                           ; Regs used in _readData: [wreg-fsr0h+status,2+status,0+btemp+1]
  1032                           ;readData@dht_data stored from wreg
  1033  0566  00F2               	movwf	readData@dht_data
  1034  0567                     l950:
  1035                           
  1036                           ;main.c: 118: __bit readData(unsigned char* dht_data);main.c: 119: {;main.c: 120:     *d
      +                          ht_data = 0;
  1037  0567  0872               	movf	readData@dht_data,w
  1038  0568  0084               	movwf	4
  1039  0569  0180               	clrf	0
  1040  056A                     l952:
  1041                           
  1042                           ;main.c: 122:     for(char i = 0; i < 8; i++)
  1043  056A  01F1               	clrf	readData@i
  1044  056B                     l958:
  1045                           
  1046                           ;main.c: 123:     {;main.c: 124:       TMR1H = 0;
  1047  056B  1283               	bcf	3,5	;RP0=0, select bank0
  1048  056C  1303               	bcf	3,6	;RP1=0, select bank0
  1049  056D  018F               	clrf	15	;volatile
  1050                           
  1051                           ;main.c: 125:       TMR1L = 0;
  1052  056E  018E               	clrf	14	;volatile
  1053                           
  1054                           ;main.c: 127:       while(!RD3)
  1055  056F  2D78               	goto	l59
  1056  0570                     l960:
  1057                           
  1058                           ;main.c: 128:           if(TMR1L > 100) return 1;
  1059  0570  3065               	movlw	101
  1060  0571  020E               	subwf	14,w	;volatile
  1061  0572  1C03               	skipc
  1062  0573  2D75               	goto	u401
  1063  0574  2D76               	goto	u400
  1064  0575                     u401:
  1065  0575  2D78               	goto	l59
  1066  0576                     u400:
  1067  0576                     l962:
  1068  0576  1403               	setc
  1069  0577  2DAC               	goto	l62
  1070  0578                     l59:
  1071                           
  1072                           ;main.c: 127:       while(!RD3)
  1073  0578  1D88               	btfss	8,3	;volatile
  1074  0579  2D7B               	goto	u411
  1075  057A  2D7C               	goto	u410
  1076  057B                     u411:
  1077  057B  2D70               	goto	l960
  1078  057C                     u410:
  1079  057C                     l966:
  1080                           
  1081                           ;main.c: 130:       TMR1H = 0;
  1082  057C  018F               	clrf	15	;volatile
  1083                           
  1084                           ;main.c: 131:       TMR1L = 0;
  1085  057D  018E               	clrf	14	;volatile
  1086                           
  1087                           ;main.c: 133:       while(RD3)
  1088  057E  2D86               	goto	l64
  1089  057F                     l968:
  1090                           
  1091                           ;main.c: 134:           if(TMR1L > 100) return 1;
  1092  057F  3065               	movlw	101
  1093  0580  020E               	subwf	14,w	;volatile
  1094  0581  1C03               	skipc
  1095  0582  2D84               	goto	u421
  1096  0583  2D85               	goto	u420
  1097  0584                     u421:
  1098  0584  2D86               	goto	l64
  1099  0585                     u420:
  1100  0585  2D76               	goto	l962
  1101  0586                     l64:
  1102                           
  1103                           ;main.c: 133:       while(RD3)
  1104  0586  1988               	btfsc	8,3	;volatile
  1105  0587  2D89               	goto	u431
  1106  0588  2D8A               	goto	u430
  1107  0589                     u431:
  1108  0589  2D7F               	goto	l968
  1109  058A                     u430:
  1110  058A                     l974:
  1111                           
  1112                           ;main.c: 136:       if(TMR1L > 50)
  1113  058A  3033               	movlw	51
  1114  058B  020E               	subwf	14,w	;volatile
  1115  058C  1C03               	skipc
  1116  058D  2D8F               	goto	u441
  1117  058E  2D90               	goto	u440
  1118  058F                     u441:
  1119  058F  2DA1               	goto	l978
  1120  0590                     u440:
  1121  0590                     l976:
  1122                           
  1123                           ;main.c: 137:          *dht_data |= (1 << (7 - i));
  1124  0590  3001               	movlw	1
  1125  0591  00F0               	movwf	??_readData
  1126  0592  0871               	movf	readData@i,w
  1127  0593  3C07               	sublw	7
  1128  0594  3E01               	addlw	1
  1129  0595  2D98               	goto	u454
  1130  0596                     u455:
  1131  0596  1003               	clrc
  1132  0597  0DF0               	rlf	??_readData,f
  1133  0598                     u454:
  1134  0598  3EFF               	addlw	-1
  1135  0599  1D03               	skipz
  1136  059A  2D96               	goto	u455
  1137  059B  0870               	movf	??_readData,w
  1138  059C  00FF               	movwf	btemp+1
  1139  059D  0872               	movf	readData@dht_data,w
  1140  059E  0084               	movwf	4
  1141  059F  087F               	movf	btemp+1,w
  1142  05A0  0480               	iorwf	0,f
  1143  05A1                     l978:
  1144                           
  1145                           ;main.c: 138:     }
  1146  05A1  3001               	movlw	1
  1147  05A2  00FF               	movwf	btemp+1
  1148  05A3  087F               	movf	btemp+1,w
  1149  05A4  07F1               	addwf	readData@i,f
  1150  05A5                     l980:
  1151  05A5  3008               	movlw	8
  1152  05A6  0271               	subwf	readData@i,w
  1153  05A7  1C03               	skipc
  1154  05A8  2DAA               	goto	u461
  1155  05A9  2DAB               	goto	u460
  1156  05AA                     u461:
  1157  05AA  2D6B               	goto	l958
  1158  05AB                     u460:
  1159  05AB                     l982:
  1160                           
  1161                           ;main.c: 139:     return 0;
  1162  05AB  1003               	clrc
  1163  05AC                     l62:
  1164  05AC  0008               	return
  1165  05AD                     __end_of_readData:
  1166                           
  1167                           	psect	text3
  1168  0500                     __ptext3:	
  1169 ;; *************** function _checkResponse *****************
  1170 ;; Defined at:
  1171 ;;		line 102 in file "main.c"
  1172 ;; Parameters:    Size  Location     Type
  1173 ;;		None
  1174 ;; Auto vars:     Size  Location     Type
  1175 ;;		None
  1176 ;; Return value:  Size  Location     Type
  1177 ;;		None               void
  1178 ;; Registers used:
  1179 ;;		wreg, status,2, status,0
  1180 ;; Tracked objects:
  1181 ;;		On entry : 0/0
  1182 ;;		On exit  : 0/0
  1183 ;;		Unchanged: 0/0
  1184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1185 ;;      Params:         0       0       0       0       0
  1186 ;;      Locals:         0       0       0       0       0
  1187 ;;      Temps:          1       0       0       0       0
  1188 ;;      Totals:         1       0       0       0       0
  1189 ;;Total ram usage:        1 bytes
  1190 ;; Hardware stack levels used:    1
  1191 ;; This function calls:
  1192 ;;		Nothing
  1193 ;; This function is called by:
  1194 ;;		_main
  1195 ;; This function uses a non-reentrant model
  1196 ;;
  1197                           
  1198                           
  1199                           ;psect for function _checkResponse
  1200  0500                     _checkResponse:
  1201  0500                     l932:	
  1202                           ;incstack = 0
  1203                           ; Regs used in _checkResponse: [wreg+status,2+status,0]
  1204                           
  1205                           
  1206                           ;main.c: 104:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  1207  0500  301A               	movlw	26
  1208  0501  00F0               	movwf	??_checkResponse
  1209  0502                     u767:
  1210  0502  0BF0               	decfsz	??_checkResponse,f
  1211  0503  2D02               	goto	u767
  1212  0504  0000               	nop
  1213  0505                     l934:
  1214                           
  1215                           ;main.c: 105:     if(!RD3)
  1216  0505  1283               	bcf	3,5	;RP0=0, select bank0
  1217  0506  1303               	bcf	3,6	;RP1=0, select bank0
  1218  0507  1988               	btfsc	8,3	;volatile
  1219  0508  2D0A               	goto	u381
  1220  0509  2D0B               	goto	u380
  1221  050A                     u381:
  1222  050A  2D1B               	goto	l946
  1223  050B                     u380:
  1224  050B                     l936:
  1225                           
  1226                           ;main.c: 106:     {;main.c: 107:         _delay((unsigned long)((80)*(8000000/4000000.0)
      +                          ));
  1227  050B  3035               	movlw	53
  1228  050C  00F0               	movwf	??_checkResponse
  1229  050D                     u777:
  1230  050D  0BF0               	decfsz	??_checkResponse,f
  1231  050E  2D0D               	goto	u777
  1232  050F                     l938:
  1233                           
  1234                           ;main.c: 108:         if(RD3)
  1235  050F  1283               	bcf	3,5	;RP0=0, select bank0
  1236  0510  1303               	bcf	3,6	;RP1=0, select bank0
  1237  0511  1D88               	btfss	8,3	;volatile
  1238  0512  2D14               	goto	u391
  1239  0513  2D15               	goto	u390
  1240  0514                     u391:
  1241  0514  2D1B               	goto	l946
  1242  0515                     u390:
  1243  0515                     l940:
  1244                           
  1245                           ;main.c: 109:         {;main.c: 110:             _delay((unsigned long)((50)*(8000000/40
      +                          00000.0)));
  1246  0515  3021               	movlw	33
  1247  0516  00F0               	movwf	??_checkResponse
  1248  0517                     u787:
  1249  0517  0BF0               	decfsz	??_checkResponse,f
  1250  0518  2D17               	goto	u787
  1251  0519                     l942:
  1252                           
  1253                           ;main.c: 111:             return 1;
  1254  0519  1403               	setc
  1255  051A  2D1C               	goto	l54
  1256  051B                     l946:
  1257                           
  1258                           ;main.c: 114:     return 0;
  1259  051B  1003               	clrc
  1260  051C                     l54:
  1261  051C  0008               	return
  1262  051D                     __end_of_checkResponse:
  1263                           
  1264                           	psect	text4
  1265  05AD                     __ptext4:	
  1266 ;; *************** function ___awmod *****************
  1267 ;; Defined at:
  1268 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\awmod.c"
  1269 ;; Parameters:    Size  Location     Type
  1270 ;;  divisor         2    0[COMMON] int 
  1271 ;;  dividend        2    2[COMMON] int 
  1272 ;; Auto vars:     Size  Location     Type
  1273 ;;  sign            1    5[COMMON] unsigned char 
  1274 ;;  counter         1    4[COMMON] unsigned char 
  1275 ;; Return value:  Size  Location     Type
  1276 ;;                  2    0[COMMON] int 
  1277 ;; Registers used:
  1278 ;;		wreg, status,2, status,0, btemp+1
  1279 ;; Tracked objects:
  1280 ;;		On entry : 0/0
  1281 ;;		On exit  : 0/0
  1282 ;;		Unchanged: 0/0
  1283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1284 ;;      Params:         4       0       0       0       0
  1285 ;;      Locals:         2       0       0       0       0
  1286 ;;      Temps:          0       0       0       0       0
  1287 ;;      Totals:         6       0       0       0       0
  1288 ;;Total ram usage:        6 bytes
  1289 ;; Hardware stack levels used:    1
  1290 ;; This function calls:
  1291 ;;		Nothing
  1292 ;; This function is called by:
  1293 ;;		_main
  1294 ;; This function uses a non-reentrant model
  1295 ;;
  1296                           
  1297                           
  1298                           ;psect for function ___awmod
  1299  05AD                     ___awmod:
  1300  05AD                     l1030:	
  1301                           ;incstack = 0
  1302                           ; Regs used in ___awmod: [wreg+status,2+status,0+btemp+1]
  1303                           
  1304  05AD  01F5               	clrf	___awmod@sign
  1305  05AE                     l1032:
  1306  05AE  1FF3               	btfss	___awmod@dividend+1,7
  1307  05AF  2DB1               	goto	u571
  1308  05B0  2DB2               	goto	u570
  1309  05B1                     u571:
  1310  05B1  2DB9               	goto	l1038
  1311  05B2                     u570:
  1312  05B2                     l1034:
  1313  05B2  09F2               	comf	___awmod@dividend,f
  1314  05B3  09F3               	comf	___awmod@dividend+1,f
  1315  05B4  0AF2               	incf	___awmod@dividend,f
  1316  05B5  1903               	skipnz
  1317  05B6  0AF3               	incf	___awmod@dividend+1,f
  1318  05B7                     l1036:
  1319  05B7  01F5               	clrf	___awmod@sign
  1320  05B8  0AF5               	incf	___awmod@sign,f
  1321  05B9                     l1038:
  1322  05B9  1FF1               	btfss	___awmod@divisor+1,7
  1323  05BA  2DBC               	goto	u581
  1324  05BB  2DBD               	goto	u580
  1325  05BC                     u581:
  1326  05BC  2DC2               	goto	l1042
  1327  05BD                     u580:
  1328  05BD                     l1040:
  1329  05BD  09F0               	comf	___awmod@divisor,f
  1330  05BE  09F1               	comf	___awmod@divisor+1,f
  1331  05BF  0AF0               	incf	___awmod@divisor,f
  1332  05C0  1903               	skipnz
  1333  05C1  0AF1               	incf	___awmod@divisor+1,f
  1334  05C2                     l1042:
  1335  05C2  0870               	movf	___awmod@divisor,w
  1336  05C3  0471               	iorwf	___awmod@divisor+1,w
  1337  05C4  1903               	btfsc	3,2
  1338  05C5  2DC7               	goto	u591
  1339  05C6  2DC8               	goto	u590
  1340  05C7                     u591:
  1341  05C7  2DF7               	goto	l1060
  1342  05C8                     u590:
  1343  05C8                     l1044:
  1344  05C8  01F4               	clrf	___awmod@counter
  1345  05C9  0AF4               	incf	___awmod@counter,f
  1346  05CA  2DD6               	goto	l1050
  1347  05CB                     l1046:
  1348  05CB  3001               	movlw	1
  1349  05CC                     u605:
  1350  05CC  1003               	clrc
  1351  05CD  0DF0               	rlf	___awmod@divisor,f
  1352  05CE  0DF1               	rlf	___awmod@divisor+1,f
  1353  05CF  3EFF               	addlw	-1
  1354  05D0  1D03               	skipz
  1355  05D1  2DCC               	goto	u605
  1356  05D2                     l1048:
  1357  05D2  3001               	movlw	1
  1358  05D3  00FF               	movwf	btemp+1
  1359  05D4  087F               	movf	btemp+1,w
  1360  05D5  07F4               	addwf	___awmod@counter,f
  1361  05D6                     l1050:
  1362  05D6  1FF1               	btfss	___awmod@divisor+1,7
  1363  05D7  2DD9               	goto	u611
  1364  05D8  2DDA               	goto	u610
  1365  05D9                     u611:
  1366  05D9  2DCB               	goto	l1046
  1367  05DA                     u610:
  1368  05DA                     l1052:
  1369  05DA  0871               	movf	___awmod@divisor+1,w
  1370  05DB  0273               	subwf	___awmod@dividend+1,w
  1371  05DC  1D03               	skipz
  1372  05DD  2DE0               	goto	u625
  1373  05DE  0870               	movf	___awmod@divisor,w
  1374  05DF  0272               	subwf	___awmod@dividend,w
  1375  05E0                     u625:
  1376  05E0  1C03               	skipc
  1377  05E1  2DE3               	goto	u621
  1378  05E2  2DE4               	goto	u620
  1379  05E3                     u621:
  1380  05E3  2DEA               	goto	l1056
  1381  05E4                     u620:
  1382  05E4                     l1054:
  1383  05E4  0870               	movf	___awmod@divisor,w
  1384  05E5  02F2               	subwf	___awmod@dividend,f
  1385  05E6  0871               	movf	___awmod@divisor+1,w
  1386  05E7  1C03               	skipc
  1387  05E8  03F3               	decf	___awmod@dividend+1,f
  1388  05E9  02F3               	subwf	___awmod@dividend+1,f
  1389  05EA                     l1056:
  1390  05EA  3001               	movlw	1
  1391  05EB                     u635:
  1392  05EB  1003               	clrc
  1393  05EC  0CF1               	rrf	___awmod@divisor+1,f
  1394  05ED  0CF0               	rrf	___awmod@divisor,f
  1395  05EE  3EFF               	addlw	-1
  1396  05EF  1D03               	skipz
  1397  05F0  2DEB               	goto	u635
  1398  05F1                     l1058:
  1399  05F1  3001               	movlw	1
  1400  05F2  02F4               	subwf	___awmod@counter,f
  1401  05F3  1D03               	btfss	3,2
  1402  05F4  2DF6               	goto	u641
  1403  05F5  2DF7               	goto	u640
  1404  05F6                     u641:
  1405  05F6  2DDA               	goto	l1052
  1406  05F7                     u640:
  1407  05F7                     l1060:
  1408  05F7  0875               	movf	___awmod@sign,w
  1409  05F8  1903               	btfsc	3,2
  1410  05F9  2DFB               	goto	u651
  1411  05FA  2DFC               	goto	u650
  1412  05FB                     u651:
  1413  05FB  2E01               	goto	l1064
  1414  05FC                     u650:
  1415  05FC                     l1062:
  1416  05FC  09F2               	comf	___awmod@dividend,f
  1417  05FD  09F3               	comf	___awmod@dividend+1,f
  1418  05FE  0AF2               	incf	___awmod@dividend,f
  1419  05FF  1903               	skipnz
  1420  0600  0AF3               	incf	___awmod@dividend+1,f
  1421  0601                     l1064:
  1422  0601  0873               	movf	___awmod@dividend+1,w
  1423  0602  00F1               	movwf	?___awmod+1
  1424  0603  0872               	movf	___awmod@dividend,w
  1425  0604  00F0               	movwf	?___awmod
  1426  0605                     l336:
  1427  0605  0008               	return
  1428  0606                     __end_of___awmod:
  1429                           
  1430                           	psect	text5
  1431  0606                     __ptext5:	
  1432 ;; *************** function ___awdiv *****************
  1433 ;; Defined at:
  1434 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\awdiv.c"
  1435 ;; Parameters:    Size  Location     Type
  1436 ;;  divisor         2    0[COMMON] int 
  1437 ;;  dividend        2    2[COMMON] int 
  1438 ;; Auto vars:     Size  Location     Type
  1439 ;;  quotient        2    6[COMMON] int 
  1440 ;;  sign            1    5[COMMON] unsigned char 
  1441 ;;  counter         1    4[COMMON] unsigned char 
  1442 ;; Return value:  Size  Location     Type
  1443 ;;                  2    0[COMMON] int 
  1444 ;; Registers used:
  1445 ;;		wreg, status,2, status,0, btemp+1
  1446 ;; Tracked objects:
  1447 ;;		On entry : 0/0
  1448 ;;		On exit  : 0/0
  1449 ;;		Unchanged: 0/0
  1450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1451 ;;      Params:         4       0       0       0       0
  1452 ;;      Locals:         4       0       0       0       0
  1453 ;;      Temps:          0       0       0       0       0
  1454 ;;      Totals:         8       0       0       0       0
  1455 ;;Total ram usage:        8 bytes
  1456 ;; Hardware stack levels used:    1
  1457 ;; This function calls:
  1458 ;;		Nothing
  1459 ;; This function is called by:
  1460 ;;		_main
  1461 ;; This function uses a non-reentrant model
  1462 ;;
  1463                           
  1464                           
  1465                           ;psect for function ___awdiv
  1466  0606                     ___awdiv:
  1467  0606                     l986:	
  1468                           ;incstack = 0
  1469                           ; Regs used in ___awdiv: [wreg+status,2+status,0+btemp+1]
  1470                           
  1471  0606  01F5               	clrf	___awdiv@sign
  1472  0607                     l988:
  1473  0607  1FF1               	btfss	___awdiv@divisor+1,7
  1474  0608  2E0A               	goto	u471
  1475  0609  2E0B               	goto	u470
  1476  060A                     u471:
  1477  060A  2E12               	goto	l994
  1478  060B                     u470:
  1479  060B                     l990:
  1480  060B  09F0               	comf	___awdiv@divisor,f
  1481  060C  09F1               	comf	___awdiv@divisor+1,f
  1482  060D  0AF0               	incf	___awdiv@divisor,f
  1483  060E  1903               	skipnz
  1484  060F  0AF1               	incf	___awdiv@divisor+1,f
  1485  0610                     l992:
  1486  0610  01F5               	clrf	___awdiv@sign
  1487  0611  0AF5               	incf	___awdiv@sign,f
  1488  0612                     l994:
  1489  0612  1FF3               	btfss	___awdiv@dividend+1,7
  1490  0613  2E15               	goto	u481
  1491  0614  2E16               	goto	u480
  1492  0615                     u481:
  1493  0615  2E1F               	goto	l1000
  1494  0616                     u480:
  1495  0616                     l996:
  1496  0616  09F2               	comf	___awdiv@dividend,f
  1497  0617  09F3               	comf	___awdiv@dividend+1,f
  1498  0618  0AF2               	incf	___awdiv@dividend,f
  1499  0619  1903               	skipnz
  1500  061A  0AF3               	incf	___awdiv@dividend+1,f
  1501  061B                     l998:
  1502  061B  3001               	movlw	1
  1503  061C  00FF               	movwf	btemp+1
  1504  061D  087F               	movf	btemp+1,w
  1505  061E  06F5               	xorwf	___awdiv@sign,f
  1506  061F                     l1000:
  1507  061F  01F6               	clrf	___awdiv@quotient
  1508  0620  01F7               	clrf	___awdiv@quotient+1
  1509  0621                     l1002:
  1510  0621  0870               	movf	___awdiv@divisor,w
  1511  0622  0471               	iorwf	___awdiv@divisor+1,w
  1512  0623  1903               	btfsc	3,2
  1513  0624  2E26               	goto	u491
  1514  0625  2E27               	goto	u490
  1515  0626                     u491:
  1516  0626  2E5E               	goto	l1022
  1517  0627                     u490:
  1518  0627                     l1004:
  1519  0627  01F4               	clrf	___awdiv@counter
  1520  0628  0AF4               	incf	___awdiv@counter,f
  1521  0629  2E35               	goto	l1010
  1522  062A                     l1006:
  1523  062A  3001               	movlw	1
  1524  062B                     u505:
  1525  062B  1003               	clrc
  1526  062C  0DF0               	rlf	___awdiv@divisor,f
  1527  062D  0DF1               	rlf	___awdiv@divisor+1,f
  1528  062E  3EFF               	addlw	-1
  1529  062F  1D03               	skipz
  1530  0630  2E2B               	goto	u505
  1531  0631                     l1008:
  1532  0631  3001               	movlw	1
  1533  0632  00FF               	movwf	btemp+1
  1534  0633  087F               	movf	btemp+1,w
  1535  0634  07F4               	addwf	___awdiv@counter,f
  1536  0635                     l1010:
  1537  0635  1FF1               	btfss	___awdiv@divisor+1,7
  1538  0636  2E38               	goto	u511
  1539  0637  2E39               	goto	u510
  1540  0638                     u511:
  1541  0638  2E2A               	goto	l1006
  1542  0639                     u510:
  1543  0639                     l1012:
  1544  0639  3001               	movlw	1
  1545  063A                     u525:
  1546  063A  1003               	clrc
  1547  063B  0DF6               	rlf	___awdiv@quotient,f
  1548  063C  0DF7               	rlf	___awdiv@quotient+1,f
  1549  063D  3EFF               	addlw	-1
  1550  063E  1D03               	skipz
  1551  063F  2E3A               	goto	u525
  1552  0640  0871               	movf	___awdiv@divisor+1,w
  1553  0641  0273               	subwf	___awdiv@dividend+1,w
  1554  0642  1D03               	skipz
  1555  0643  2E46               	goto	u535
  1556  0644  0870               	movf	___awdiv@divisor,w
  1557  0645  0272               	subwf	___awdiv@dividend,w
  1558  0646                     u535:
  1559  0646  1C03               	skipc
  1560  0647  2E49               	goto	u531
  1561  0648  2E4A               	goto	u530
  1562  0649                     u531:
  1563  0649  2E51               	goto	l1018
  1564  064A                     u530:
  1565  064A                     l1014:
  1566  064A  0870               	movf	___awdiv@divisor,w
  1567  064B  02F2               	subwf	___awdiv@dividend,f
  1568  064C  0871               	movf	___awdiv@divisor+1,w
  1569  064D  1C03               	skipc
  1570  064E  03F3               	decf	___awdiv@dividend+1,f
  1571  064F  02F3               	subwf	___awdiv@dividend+1,f
  1572  0650                     l1016:
  1573  0650  1476               	bsf	___awdiv@quotient,0
  1574  0651                     l1018:
  1575  0651  3001               	movlw	1
  1576  0652                     u545:
  1577  0652  1003               	clrc
  1578  0653  0CF1               	rrf	___awdiv@divisor+1,f
  1579  0654  0CF0               	rrf	___awdiv@divisor,f
  1580  0655  3EFF               	addlw	-1
  1581  0656  1D03               	skipz
  1582  0657  2E52               	goto	u545
  1583  0658                     l1020:
  1584  0658  3001               	movlw	1
  1585  0659  02F4               	subwf	___awdiv@counter,f
  1586  065A  1D03               	btfss	3,2
  1587  065B  2E5D               	goto	u551
  1588  065C  2E5E               	goto	u550
  1589  065D                     u551:
  1590  065D  2E39               	goto	l1012
  1591  065E                     u550:
  1592  065E                     l1022:
  1593  065E  0875               	movf	___awdiv@sign,w
  1594  065F  1903               	btfsc	3,2
  1595  0660  2E62               	goto	u561
  1596  0661  2E63               	goto	u560
  1597  0662                     u561:
  1598  0662  2E68               	goto	l1026
  1599  0663                     u560:
  1600  0663                     l1024:
  1601  0663  09F6               	comf	___awdiv@quotient,f
  1602  0664  09F7               	comf	___awdiv@quotient+1,f
  1603  0665  0AF6               	incf	___awdiv@quotient,f
  1604  0666  1903               	skipnz
  1605  0667  0AF7               	incf	___awdiv@quotient+1,f
  1606  0668                     l1026:
  1607  0668  0877               	movf	___awdiv@quotient+1,w
  1608  0669  00F1               	movwf	?___awdiv+1
  1609  066A  0876               	movf	___awdiv@quotient,w
  1610  066B  00F0               	movwf	?___awdiv
  1611  066C                     l323:
  1612  066C  0008               	return
  1613  066D                     __end_of___awdiv:
  1614                           
  1615                           	psect	text6
  1616  053B                     __ptext6:	
  1617 ;; *************** function _LcdPrint *****************
  1618 ;; Defined at:
  1619 ;;		line 68 in file "main.c"
  1620 ;; Parameters:    Size  Location     Type
  1621 ;;  message         2    3[COMMON] PTR unsigned char 
  1622 ;;		 -> STR_3(12), STR_2(16), humi(14), temp(14), 
  1623 ;;		 -> STR_1(10), 
  1624 ;; Auto vars:     Size  Location     Type
  1625 ;;  i               1    5[COMMON] unsigned char 
  1626 ;; Return value:  Size  Location     Type
  1627 ;;                  1    wreg      void 
  1628 ;; Registers used:
  1629 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1630 ;; Tracked objects:
  1631 ;;		On entry : 0/0
  1632 ;;		On exit  : 0/0
  1633 ;;		Unchanged: 0/0
  1634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1635 ;;      Params:         2       0       0       0       0
  1636 ;;      Locals:         1       0       0       0       0
  1637 ;;      Temps:          0       0       0       0       0
  1638 ;;      Totals:         3       0       0       0       0
  1639 ;;Total ram usage:        3 bytes
  1640 ;; Hardware stack levels used:    1
  1641 ;; Hardware stack levels required when called:    1
  1642 ;; This function calls:
  1643 ;;		_LcdDataWrite
  1644 ;; This function is called by:
  1645 ;;		_main
  1646 ;; This function uses a non-reentrant model
  1647 ;;
  1648                           
  1649                           
  1650                           ;psect for function _LcdPrint
  1651  053B                     _LcdPrint:
  1652  053B                     l916:	
  1653                           ;incstack = 0
  1654                           ; Regs used in _LcdPrint: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1655                           
  1656                           
  1657                           ;main.c: 68: void LcdPrint(char* message);main.c: 69: {;main.c: 70:     for(char i = 0; 
      +                          message[i] != '\0'; i++)
  1658  053B  01F5               	clrf	LcdPrint@i
  1659  053C  2D52               	goto	l922
  1660  053D                     l918:
  1661                           
  1662                           ;main.c: 71:     {;main.c: 72:         LcdDataWrite(message[i]);
  1663  053D  0875               	movf	LcdPrint@i,w
  1664  053E  0773               	addwf	LcdPrint@message,w
  1665  053F  0084               	movwf	4
  1666  0540  0874               	movf	LcdPrint@message+1,w
  1667  0541  1803               	skipnc
  1668  0542  0A74               	incf	LcdPrint@message+1,w
  1669  0543  00FF               	movwf	btemp+1
  1670  0544  120A  118A  2003  120A  118A  	fcall	stringtab
  1671  0549  120A  118A  24AE  120A  118A  	fcall	_LcdDataWrite
  1672  054E                     l920:
  1673                           
  1674                           ;main.c: 73:     }
  1675  054E  3001               	movlw	1
  1676  054F  00FF               	movwf	btemp+1
  1677  0550  087F               	movf	btemp+1,w
  1678  0551  07F5               	addwf	LcdPrint@i,f
  1679  0552                     l922:
  1680  0552  0875               	movf	LcdPrint@i,w
  1681  0553  0773               	addwf	LcdPrint@message,w
  1682  0554  0084               	movwf	4
  1683  0555  0874               	movf	LcdPrint@message+1,w
  1684  0556  1803               	skipnc
  1685  0557  0A74               	incf	LcdPrint@message+1,w
  1686  0558  1283               	bcf	3,5	;RP0=0, select bank0
  1687  0559  1303               	bcf	3,6	;RP1=0, select bank0
  1688  055A  00FF               	movwf	btemp+1
  1689  055B  120A  118A  2003  120A  118A  	fcall	stringtab
  1690  0560  3A00               	xorlw	0
  1691  0561  1D03               	skipz
  1692  0562  2D64               	goto	u371
  1693  0563  2D65               	goto	u370
  1694  0564                     u371:
  1695  0564  2D3D               	goto	l918
  1696  0565                     u370:
  1697  0565                     l30:
  1698  0565  0008               	return
  1699  0566                     __end_of_LcdPrint:
  1700                           
  1701                           	psect	text7
  1702  04AE                     __ptext7:	
  1703 ;; *************** function _LcdDataWrite *****************
  1704 ;; Defined at:
  1705 ;;		line 58 in file "main.c"
  1706 ;; Parameters:    Size  Location     Type
  1707 ;;  data            1    wreg     unsigned char 
  1708 ;; Auto vars:     Size  Location     Type
  1709 ;;  data            1    2[COMMON] unsigned char 
  1710 ;; Return value:  Size  Location     Type
  1711 ;;                  1    wreg      void 
  1712 ;; Registers used:
  1713 ;;		wreg, status,2, status,0, btemp+1
  1714 ;; Tracked objects:
  1715 ;;		On entry : 0/0
  1716 ;;		On exit  : 0/0
  1717 ;;		Unchanged: 0/0
  1718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1719 ;;      Params:         0       0       0       0       0
  1720 ;;      Locals:         1       0       0       0       0
  1721 ;;      Temps:          2       0       0       0       0
  1722 ;;      Totals:         3       0       0       0       0
  1723 ;;Total ram usage:        3 bytes
  1724 ;; Hardware stack levels used:    1
  1725 ;; This function calls:
  1726 ;;		Nothing
  1727 ;; This function is called by:
  1728 ;;		_LcdPrint
  1729 ;; This function uses a non-reentrant model
  1730 ;;
  1731                           
  1732                           
  1733                           ;psect for function _LcdDataWrite
  1734  04AE                     _LcdDataWrite:
  1735                           
  1736                           ;incstack = 0
  1737                           ; Regs used in _LcdDataWrite: [wreg+status,2+status,0+btemp+1]
  1738                           ;LcdDataWrite@data stored from wreg
  1739  04AE  00F2               	movwf	LcdDataWrite@data
  1740  04AF                     l896:
  1741                           
  1742                           ;main.c: 58: void LcdDataWrite(char data);main.c: 59: {;main.c: 60:     PORTB = data;
  1743  04AF  0872               	movf	LcdDataWrite@data,w
  1744  04B0  1283               	bcf	3,5	;RP0=0, select bank0
  1745  04B1  1303               	bcf	3,6	;RP1=0, select bank0
  1746  04B2  0086               	movwf	6	;volatile
  1747  04B3                     l898:
  1748                           
  1749                           ;main.c: 61:     PORTD |= (1<<0);
  1750  04B3  1408               	bsf	8,0	;volatile
  1751  04B4                     l900:
  1752                           
  1753                           ;main.c: 62:     PORTD &= ~(1<<1);
  1754  04B4  30FD               	movlw	253
  1755  04B5  00FF               	movwf	btemp+1
  1756  04B6  087F               	movf	btemp+1,w
  1757  04B7  0588               	andwf	8,f	;volatile
  1758  04B8                     l902:
  1759                           
  1760                           ;main.c: 63:     PORTD |= (1<<2);
  1761  04B8  1508               	bsf	8,2	;volatile
  1762  04B9                     l904:
  1763                           
  1764                           ;main.c: 64:     _delay((unsigned long)((10)*(8000000/4000.0)));
  1765  04B9  301A               	movlw	26
  1766  04BA  00F1               	movwf	??_LcdDataWrite+1
  1767  04BB  30F8               	movlw	248
  1768  04BC  00F0               	movwf	??_LcdDataWrite
  1769  04BD                     u797:
  1770  04BD  0BF0               	decfsz	??_LcdDataWrite,f
  1771  04BE  2CBD               	goto	u797
  1772  04BF  0BF1               	decfsz	??_LcdDataWrite+1,f
  1773  04C0  2CBD               	goto	u797
  1774  04C1  0000               	nop
  1775                           
  1776                           ;main.c: 65:     PORTD &= ~(1<<2);
  1777  04C2  30FB               	movlw	251
  1778  04C3  00FF               	movwf	btemp+1
  1779  04C4  087F               	movf	btemp+1,w
  1780  04C5  1283               	bcf	3,5	;RP0=0, select bank0
  1781  04C6  1303               	bcf	3,6	;RP1=0, select bank0
  1782  04C7  0588               	andwf	8,f	;volatile
  1783  04C8                     l24:
  1784  04C8  0008               	return
  1785  04C9                     __end_of_LcdDataWrite:
  1786                           
  1787                           	psect	text8
  1788  051D                     __ptext8:	
  1789 ;; *************** function _LcdCmdWrite *****************
  1790 ;; Defined at:
  1791 ;;		line 40 in file "main.c"
  1792 ;; Parameters:    Size  Location     Type
  1793 ;;  cmd             1    wreg     unsigned char 
  1794 ;; Auto vars:     Size  Location     Type
  1795 ;;  cmd             1    2[COMMON] unsigned char 
  1796 ;; Return value:  Size  Location     Type
  1797 ;;                  1    wreg      void 
  1798 ;; Registers used:
  1799 ;;		wreg, status,2, status,0, btemp+1
  1800 ;; Tracked objects:
  1801 ;;		On entry : 0/0
  1802 ;;		On exit  : 0/0
  1803 ;;		Unchanged: 0/0
  1804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1805 ;;      Params:         0       0       0       0       0
  1806 ;;      Locals:         1       0       0       0       0
  1807 ;;      Temps:          2       0       0       0       0
  1808 ;;      Totals:         3       0       0       0       0
  1809 ;;Total ram usage:        3 bytes
  1810 ;; Hardware stack levels used:    1
  1811 ;; This function calls:
  1812 ;;		Nothing
  1813 ;; This function is called by:
  1814 ;;		_main
  1815 ;; This function uses a non-reentrant model
  1816 ;;
  1817                           
  1818                           
  1819                           ;psect for function _LcdCmdWrite
  1820  051D                     _LcdCmdWrite:
  1821                           
  1822                           ;incstack = 0
  1823                           ; Regs used in _LcdCmdWrite: [wreg+status,2+status,0+btemp+1]
  1824                           ;LcdCmdWrite@cmd stored from wreg
  1825  051D  00F2               	movwf	LcdCmdWrite@cmd
  1826  051E                     l906:
  1827                           
  1828                           ;main.c: 40: void LcdCmdWrite(char cmd);main.c: 41: {;main.c: 42:     PORTB = cmd;
  1829  051E  0872               	movf	LcdCmdWrite@cmd,w
  1830  051F  1283               	bcf	3,5	;RP0=0, select bank0
  1831  0520  1303               	bcf	3,6	;RP1=0, select bank0
  1832  0521  0086               	movwf	6	;volatile
  1833  0522                     l908:
  1834                           
  1835                           ;main.c: 43:     PORTD &= ~(1<<0);
  1836  0522  30FE               	movlw	254
  1837  0523  00FF               	movwf	btemp+1
  1838  0524  087F               	movf	btemp+1,w
  1839  0525  0588               	andwf	8,f	;volatile
  1840  0526                     l910:
  1841                           
  1842                           ;main.c: 44:     PORTD &= ~(1<<1);
  1843  0526  30FD               	movlw	253
  1844  0527  00FF               	movwf	btemp+1
  1845  0528  087F               	movf	btemp+1,w
  1846  0529  0588               	andwf	8,f	;volatile
  1847  052A                     l912:
  1848                           
  1849                           ;main.c: 45:     PORTD |= (1<<2);
  1850  052A  1508               	bsf	8,2	;volatile
  1851                           
  1852                           ;main.c: 46:     _delay((unsigned long)((10)*(8000000/4000.0)));
  1853  052B  301A               	movlw	26
  1854  052C  00F1               	movwf	??_LcdCmdWrite+1
  1855  052D  30F8               	movlw	248
  1856  052E  00F0               	movwf	??_LcdCmdWrite
  1857  052F                     u807:
  1858  052F  0BF0               	decfsz	??_LcdCmdWrite,f
  1859  0530  2D2F               	goto	u807
  1860  0531  0BF1               	decfsz	??_LcdCmdWrite+1,f
  1861  0532  2D2F               	goto	u807
  1862  0533  0000               	nop
  1863  0534                     l914:
  1864                           
  1865                           ;main.c: 47:     PORTD &= ~(1<<2);
  1866  0534  30FB               	movlw	251
  1867  0535  00FF               	movwf	btemp+1
  1868  0536  087F               	movf	btemp+1,w
  1869  0537  1283               	bcf	3,5	;RP0=0, select bank0
  1870  0538  1303               	bcf	3,6	;RP1=0, select bank0
  1871  0539  0588               	andwf	8,f	;volatile
  1872  053A                     l21:
  1873  053A  0008               	return
  1874  053B                     __end_of_LcdCmdWrite:
  1875  007E                     btemp	set	126	;btemp
  1876  007E                     wtemp0	set	126
  1877                           
  1878                           	psect	config
  1879                           
  1880                           ;Config register CONFIG @ 0x2007
  1881                           ;	Oscillator Selection bits
  1882                           ;	FOSC = XT, XT oscillator
  1883                           ;	Watchdog Timer Enable bit
  1884                           ;	WDTE = OFF, WDT disabled
  1885                           ;	Power-up Timer Enable bit
  1886                           ;	PWRTE = ON, PWRT enabled
  1887                           ;	Brown-out Reset Enable bit
  1888                           ;	BOREN = ON, BOR enabled
  1889                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1890                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1891                           ;	Data EEPROM Memory Code Protection bit
  1892                           ;	CPD = OFF, Data EEPROM code protection off
  1893                           ;	Flash Program Memory Write Enable bits
  1894                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1895                           ;	In-Circuit Debugger Mode bit
  1896                           ;	DEBUG = 0x1, unprogrammed default
  1897                           ;	Flash Program Memory Code Protection bit
  1898                           ;	CP = OFF, Code protection off
  1899  2007                     	org	8199
  1900  2007  3F71               	dw	16241

Data Sizes:
    Strings     38
    Constant    0
    Data        28
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      13
    BANK0            80     10      40
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    readData@dht_data	PTR unsigned char  size(1) Largest target is 1
		 -> check_sum(COMMON[1]), t_byte2(COMMON[1]), t_byte1(COMMON[1]), rh_byte2(COMMON[1]), 
		 -> rh_byte1(COMMON[1]), 

    LcdPrint@message	PTR unsigned char  size(2) Largest target is 16
		 -> STR_3(CODE[12]), STR_2(CODE[16]), humi(BANK0[14]), temp(BANK0[14]), 
		 -> STR_1(CODE[10]), 


Critical Paths under _main in COMMON

    _main->___awdiv
    _LcdPrint->_LcdDataWrite

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0    2299
                                              0 BANK0     10    10      0
                        _LcdCmdWrite
                           _LcdPrint
                            ___awdiv
                            ___awmod
                      _checkResponse
                           _readData
                        _startSignal
 ---------------------------------------------------------------------------------
 (1) _startSignal                                          2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _readData                                             3     3      0     277
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _checkResponse                                        1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     600
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     908
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _LcdPrint                                             3     1      2     492
                                              3 COMMON     3     1      2
                       _LcdDataWrite
 ---------------------------------------------------------------------------------
 (2) _LcdDataWrite                                         3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _LcdCmdWrite                                          3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LcdCmdWrite
   _LcdPrint
     _LcdDataWrite
   ___awdiv
   ___awmod
   _checkResponse
   _readData
   _startSignal

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      A      28       5       50.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      35      12        0.0%
ABS                  0      0      35       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Thu Jun 04 23:34:40 2020

                      pc 0002      __end_of_LcdCmdWrite 053B                       l21 053A  
                     l30 0565                       l24 04C8                       l54 051C  
                     l62 05AC                       l64 0586                       l49 04E3  
                     l59 0578     __end_of_LcdDataWrite 04C9             ___awdiv@sign 0075  
                     fsr 0004              _startSignal 04C9    __end_of_checkResponse 051D  
                    l323 066C                      l336 0605                      l900 04B4  
                    l910 0526                      l902 04B8                      l912 052A  
                    l904 04B9                      l920 054E                      l914 0534  
                    l906 051E                      l922 0552                      l930 04E0  
                    l908 0522                      l916 053B                      l940 0515  
                    l932 0500                      l924 04C9                      l918 053D  
                    l942 0519                      l934 0505                      l950 0567  
                    l926 04CF                      l936 050B                      l960 0570  
                    l952 056A                      l928 04D8                      l938 050F  
                    l946 051B                      l962 0576                      l980 05A5  
                    l990 060B                      l982 05AB                      l974 058A  
                    l966 057C                      l958 056B                      l896 04AF  
                    l992 0610                      l976 0590                      l968 057F  
                    l898 04B3                      l994 0612                      l986 0606  
                    l978 05A1                      l996 0616                      l988 0607  
                    l998 061B                      _RD3 0043                      u400 0576  
                    u401 0575                      u410 057C                      u411 057B  
                    u420 0585                      u421 0584                      u510 0639  
                    u430 058A                      u511 0638                      u431 0589  
                    u440 0590                      u505 062B                      u441 058F  
                    u370 0565                      u530 064A                      u610 05DA  
                    u371 0564                      u531 0649                      u611 05D9  
                    u620 05E4                      u380 050B                      u460 05AB  
                    u700 06B3                      u525 063A                      u621 05E3  
                    u605 05CC                      u381 050A                      u461 05AA  
                    u701 06B2                      u550 065E                      u470 060B  
                    u390 0515                      u454 0598                      u710 06BD  
                    u551 065D                      u535 0646                      u471 060A  
                    u391 0514                      u455 0596                      u711 06BC  
                    u560 0663                      u480 0616                      u640 05F7  
                    u720 06FD                      u561 0662                      u545 0652  
                    u481 0615                      u641 05F6                      u625 05E0  
                    u721 06FC                      u490 0627                      u650 05FC  
                    u570 05B2                      u491 0626                      u651 05FB  
                    u635 05EB                      u571 05B1                      u580 05BD  
                    u660 068B                      u581 05BC                      u725 06F9  
                    u661 068A                      u590 05C8                      u670 0695  
                    u807 052F                      u591 05C7                      u671 0694  
                    u680 069F                      u737 07DD                      u681 069E  
                    u690 06A9                      u747 04D3                      u691 06A8  
                    u757 04DD                      u767 0502                      u777 050D  
                    u787 0517                      u797 04BD                      fsr0 0004  
                    indf 0000             ___awmod@sign 0075                     l1000 061F  
                   l1010 0635                     l1002 0621                     l1020 0658  
                   l1012 0639                     l1004 0627                     l1100 0791  
                   l1014 064A                     l1006 062A                     l1022 065E  
                   l1030 05AD                     l1102 079A                     l1110 07C0  
                   l1024 0663                     l1016 0650                     l1008 0631  
                   l1040 05BD                     l1032 05AE                     l1112 07CC  
                   l1104 07A0                     l1026 0668                     l1018 0651  
                   l1050 05D6                     l1042 05C2                     l1034 05B2  
                   l1106 07AA                     l1114 07D5                     l1052 05DA  
                   l1044 05C8                     l1060 05F7                     l1036 05B7  
                   l1108 07B6                     l1062 05FC                     l1054 05E4  
                   l1046 05CB                     l1038 05B9                     l1070 0671  
                   l1064 0601                     l1056 05EA                     l1048 05D2  
                   l1080 0695                     l1072 0677                     l1058 05F1  
                   l1090 06C9                     l1082 069F                     l1074 067D  
                   l1092 06D3                     l1084 06A9                     l1076 0682  
                   l1068 066D                     l1094 06FD                     l1086 06B3  
                   l1078 068B                     l1096 0787                     l1088 06BD  
                   l1098 078B                     STR_1 002F                     STR_2 0013  
                   STR_3 0023         LcdDataWrite@data 0072                     _main 066D  
                   _humi 0020                     _temp 002E                     btemp 007E  
                   start 0000                    ?_main 0070          __end_of___awdiv 066D  
        __end_of___awmod 0606          ___awdiv@divisor 0070          ___awdiv@counter 0074  
                  _TMR1H 000F                    _TMR1L 000E                    _PORTB 0006  
                  _PORTD 0008                    _TRISB 0086                    _TRISD 0088  
                  pclath 000A                    status 0003                    wtemp0 007E  
            _LcdCmdWrite 051D         __end_of_LcdPrint 0566          __initialization 07E7  
           __end_of_main 07E7                   ??_main 003C         ___awdiv@dividend 0072  
                 _TRISD3 0443    __size_of_LcdDataWrite 001B                ??___awdiv 0074  
              ??___awmod 0074         __end_of_readData 05AD         ___awdiv@quotient 0076  
        ___awmod@divisor 0070          ___awmod@counter 0074             _LcdDataWrite 04AE  
__end_of__initialization 07FC           __pcstackCOMMON 0070             __pidataBANK0 04E4  
           ?_startSignal 0070                ?_LcdPrint 0073               __pbssBANK0 0046  
             __pmaintext 066D          LcdPrint@message 0073               ??_LcdPrint 0075  
             __stringtab 0003                ?_readData 0070   __size_of_checkResponse 001D  
           ?_LcdCmdWrite 0070         readData@dht_data 0072                  ___awdiv 0606  
                ___awmod 05AD                  __ptext1 04C9                  __ptext2 0566  
                __ptext3 0500                  __ptext4 05AD                  __ptext5 0606  
                __ptext6 053B                  __ptext7 04AE                  __ptext8 051D  
       ___awmod@dividend 0072                  _t_byte1 007C                  _t_byte2 007B  
   end_of_initialization 07FC               ??_readData 0070                LcdPrint@i 0075  
          _checkResponse 0500     __size_of_startSignal 001B           LcdCmdWrite@cmd 0072  
         ?_checkResponse 0070      start_initialization 07E7        __size_of_LcdPrint 002B  
   __size_of_LcdCmdWrite 001E               init_fetch0 049B              __pdataBANK0 0020  
            __pbssCOMMON 0078                ___latbits 0002            __pcstackBANK0 003C  
              _check_sum 0078        __size_of_readData 0047                 ?___awdiv 0070  
               ?___awmod 0070          ??_checkResponse 0070                __pstrings 0003  
            __stringbase 0012                 _LcdPrint 053B            ?_LcdDataWrite 0070  
              readData@i 0071         __size_of___awdiv 0067         __size_of___awmod 0059  
          ??_startSignal 0070       __end_of__stringtab 0013           ??_LcdDataWrite 0070  
               _readData 0566            __size_of_main 017A                 _rh_byte1 007A  
               _rh_byte2 0079                 _time_out 0046      __end_of_startSignal 04E4  
               init_ram0 049F            ??_LcdCmdWrite 0070                stringcode 000D  
               stringdir 000D                 stringtab 0003  
