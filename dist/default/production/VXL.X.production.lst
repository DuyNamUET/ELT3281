

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Wed Jun 03 22:44:11 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	inittext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    14                           	dabs	1,0x7E,2
    15  0000                     
    16                           ; Version 2.20
    17                           ; Generated 12/02/2020 GMT
    18                           ; 
    19                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC16F877A Definitions
    48                           ; 
    49                           ; SFR Addresses
    50  0000                     	;# 
    51  0001                     	;# 
    52  0002                     	;# 
    53  0003                     	;# 
    54  0004                     	;# 
    55  0005                     	;# 
    56  0006                     	;# 
    57  0007                     	;# 
    58  0008                     	;# 
    59  0009                     	;# 
    60  000A                     	;# 
    61  000B                     	;# 
    62  000C                     	;# 
    63  000D                     	;# 
    64  000E                     	;# 
    65  000E                     	;# 
    66  000F                     	;# 
    67  0010                     	;# 
    68  0011                     	;# 
    69  0012                     	;# 
    70  0013                     	;# 
    71  0014                     	;# 
    72  0015                     	;# 
    73  0015                     	;# 
    74  0016                     	;# 
    75  0017                     	;# 
    76  0018                     	;# 
    77  0019                     	;# 
    78  001A                     	;# 
    79  001B                     	;# 
    80  001B                     	;# 
    81  001C                     	;# 
    82  001D                     	;# 
    83  001E                     	;# 
    84  001F                     	;# 
    85  0081                     	;# 
    86  0085                     	;# 
    87  0086                     	;# 
    88  0087                     	;# 
    89  0088                     	;# 
    90  0089                     	;# 
    91  008C                     	;# 
    92  008D                     	;# 
    93  008E                     	;# 
    94  0091                     	;# 
    95  0092                     	;# 
    96  0093                     	;# 
    97  0094                     	;# 
    98  0098                     	;# 
    99  0099                     	;# 
   100  009C                     	;# 
   101  009D                     	;# 
   102  009E                     	;# 
   103  009F                     	;# 
   104  010C                     	;# 
   105  010D                     	;# 
   106  010E                     	;# 
   107  010F                     	;# 
   108  018C                     	;# 
   109  018D                     	;# 
   110  0000                     	;# 
   111  0001                     	;# 
   112  0002                     	;# 
   113  0003                     	;# 
   114  0004                     	;# 
   115  0005                     	;# 
   116  0006                     	;# 
   117  0007                     	;# 
   118  0008                     	;# 
   119  0009                     	;# 
   120  000A                     	;# 
   121  000B                     	;# 
   122  000C                     	;# 
   123  000D                     	;# 
   124  000E                     	;# 
   125  000E                     	;# 
   126  000F                     	;# 
   127  0010                     	;# 
   128  0011                     	;# 
   129  0012                     	;# 
   130  0013                     	;# 
   131  0014                     	;# 
   132  0015                     	;# 
   133  0015                     	;# 
   134  0016                     	;# 
   135  0017                     	;# 
   136  0018                     	;# 
   137  0019                     	;# 
   138  001A                     	;# 
   139  001B                     	;# 
   140  001B                     	;# 
   141  001C                     	;# 
   142  001D                     	;# 
   143  001E                     	;# 
   144  001F                     	;# 
   145  0081                     	;# 
   146  0085                     	;# 
   147  0086                     	;# 
   148  0087                     	;# 
   149  0088                     	;# 
   150  0089                     	;# 
   151  008C                     	;# 
   152  008D                     	;# 
   153  008E                     	;# 
   154  0091                     	;# 
   155  0092                     	;# 
   156  0093                     	;# 
   157  0094                     	;# 
   158  0098                     	;# 
   159  0099                     	;# 
   160  009C                     	;# 
   161  009D                     	;# 
   162  009E                     	;# 
   163  009F                     	;# 
   164  010C                     	;# 
   165  010D                     	;# 
   166  010E                     	;# 
   167  010F                     	;# 
   168  018C                     	;# 
   169  018D                     	;# 
   170                           
   171                           	psect	idataBANK0
   172  06E9                     __pidataBANK0:
   173                           
   174                           ;initializer for main@F856
   175  06E9  3447               	retlw	71
   176  06EA  346F               	retlw	111
   177  06EB  346F               	retlw	111
   178  06EC  3464               	retlw	100
   179  06ED  3420               	retlw	32
   180  06EE  346D               	retlw	109
   181  06EF  346F               	retlw	111
   182  06F0  3472               	retlw	114
   183  06F1  346E               	retlw	110
   184  06F2  3469               	retlw	105
   185  06F3  346E               	retlw	110
   186  06F4  3467               	retlw	103
   187  06F5  3421               	retlw	33
   188  06F6  3400               	retlw	0
   189  0008                     _PORTD	set	8
   190  0006                     _PORTB	set	6
   191  0088                     _TRISD	set	136
   192  0086                     _TRISB	set	134
   193                           
   194                           	psect	cinit
   195  07EE                     start_initialization:	
   196                           ; #config settings
   197                           
   198  07EE                     __initialization:
   199                           
   200                           ; Initialize objects allocated to BANK0
   201  07EE  1383               	bcf	3,7	;select IRP bank0
   202  07EF  303D               	movlw	low (__pdataBANK0+14)
   203  07F0  00FD               	movwf	btemp+-1
   204  07F1  3006               	movlw	high __pidataBANK0
   205  07F2  00FE               	movwf	btemp
   206  07F3  30E9               	movlw	low __pidataBANK0
   207  07F4  00FF               	movwf	btemp+1
   208  07F5  302F               	movlw	low __pdataBANK0
   209  07F6  0084               	movwf	4
   210  07F7  120A  118A  26FB  120A  118A  	fcall	init_ram0
   211  07FC                     end_of_initialization:	
   212                           ;End of C runtime variable initialization code
   213                           
   214  07FC                     __end_of__initialization:
   215  07FC  0183               	clrf	3
   216  07FD  120A  118A  2F55   	ljmp	_main	;jump to C main() function
   217                           
   218                           	psect	dataBANK0
   219  002F                     __pdataBANK0:
   220  002F                     main@F856:
   221  002F                     	ds	14
   222                           
   223                           	psect	inittext
   224  06F7                     init_fetch0:	
   225                           ;	Called with low address in FSR and high address in W
   226                           
   227  06F7  087E               	movf	btemp,w
   228  06F8  008A               	movwf	10
   229  06F9  087F               	movf	btemp+1,w
   230  06FA  0082               	movwf	2
   231  06FB                     init_ram0:	
   232                           ;Called with:
   233                           ;	high address of idata address in btemp 
   234                           ;	low address of idata address in btemp+1 
   235                           ;	low address of data in FSR
   236                           ;	high address + 1 of data in btemp-1
   237                           
   238  06FB  120A  118A  26F7  120A  118A  	fcall	init_fetch0
   239  0700  0080               	movwf	0
   240  0701  0A84               	incf	4,f
   241  0702  0804               	movf	4,w
   242  0703  067D               	xorwf	btemp+-1,w
   243  0704  1903               	btfsc	3,2
   244  0705  3400               	retlw	0
   245  0706  0AFF               	incf	btemp+1,f
   246  0707  1903               	btfsc	3,2
   247  0708  0AFE               	incf	btemp,f
   248  0709  2EFB               	goto	init_ram0
   249                           
   250                           	psect	cstackCOMMON
   251  0070                     __pcstackCOMMON:
   252  0070                     ?_Lcd_CmdWrite:
   253  0070                     ??_Lcd_CmdWrite:	
   254                           ; 1 bytes @ 0x0
   255                           
   256  0070                     ?_Lcd_DataWrite:	
   257                           ; 1 bytes @ 0x0
   258                           
   259  0070                     ??_Lcd_DataWrite:	
   260                           ; 1 bytes @ 0x0
   261                           
   262  0070                     ?_main:	
   263                           ; 1 bytes @ 0x0
   264                           
   265                           
   266                           ; 1 bytes @ 0x0
   267  0070                     	ds	2
   268  0072                     Lcd_CmdWrite@cmd:
   269  0072                     Lcd_DataWrite@data:	
   270                           ; 1 bytes @ 0x2
   271                           
   272                           
   273                           ; 1 bytes @ 0x2
   274  0072                     	ds	1
   275  0073                     ??_main:
   276                           
   277                           ; 1 bytes @ 0x3
   278  0073                     	ds	4
   279                           
   280                           	psect	cstackBANK0
   281  0020                     __pcstackBANK0:
   282  0020                     main@a:
   283                           
   284                           ; 14 bytes @ 0x0
   285  0020                     	ds	14
   286  002E                     main@i:
   287                           
   288                           ; 1 bytes @ 0xE
   289  002E                     	ds	1
   290                           
   291                           	psect	maintext
   292  0755                     __pmaintext:	
   293 ;;
   294 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   295 ;;
   296 ;; *************** function _main *****************
   297 ;; Defined at:
   298 ;;		line 62 in file "main.c"
   299 ;; Parameters:    Size  Location     Type
   300 ;;		None
   301 ;; Auto vars:     Size  Location     Type
   302 ;;  a              14    0[BANK0 ] unsigned char [14]
   303 ;;  i               1   14[BANK0 ] unsigned char 
   304 ;; Return value:  Size  Location     Type
   305 ;;                  1    wreg      void 
   306 ;; Registers used:
   307 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   308 ;; Tracked objects:
   309 ;;		On entry : B00/0
   310 ;;		On exit  : 0/0
   311 ;;		Unchanged: 0/0
   312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   313 ;;      Params:         0       0       0       0       0
   314 ;;      Locals:         0      15       0       0       0
   315 ;;      Temps:          4       0       0       0       0
   316 ;;      Totals:         4      15       0       0       0
   317 ;;Total ram usage:       19 bytes
   318 ;; Hardware stack levels required when called:    1
   319 ;; This function calls:
   320 ;;		_Lcd_CmdWrite
   321 ;;		_Lcd_DataWrite
   322 ;; This function is called by:
   323 ;;		Startup code after reset
   324 ;; This function uses a non-reentrant model
   325 ;;
   326                           
   327                           
   328                           ;psect for function _main
   329  0755                     _main:
   330  0755                     l715:	
   331                           ;incstack = 0
   332                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   333                           
   334                           
   335                           ;main.c: 64:     char i,a[]={"Good morning!"};
   336  0755  3020               	movlw	main@a& (0+255)
   337  0756  0084               	movwf	4
   338  0757  302F               	movlw	low main@F856
   339  0758  00F3               	movwf	??_main
   340  0759  0804               	movf	4,w
   341  075A  00F4               	movwf	??_main+1
   342  075B  300E               	movlw	14
   343  075C  00F5               	movwf	??_main+2
   344  075D                     u30:
   345  075D  0873               	movf	??_main,w
   346  075E  0084               	movwf	4
   347  075F  1383               	bcf	3,7	;select IRP bank0
   348  0760  0800               	movf	0,w
   349  0761  00F6               	movwf	??_main+3
   350  0762  0AF3               	incf	??_main,f
   351  0763  0874               	movf	??_main+1,w
   352  0764  0084               	movwf	4
   353  0765  0876               	movf	??_main+3,w
   354  0766  0080               	movwf	0
   355  0767  0AF4               	incf	??_main+1,f
   356  0768  0BF5               	decfsz	??_main+2,f
   357  0769  2F5D               	goto	u30
   358  076A                     l717:
   359                           
   360                           ;main.c: 66:     TRISB = 0x00;
   361  076A  1683               	bsf	3,5	;RP0=1, select bank1
   362  076B  1303               	bcf	3,6	;RP1=0, select bank1
   363  076C  0186               	clrf	6	;volatile
   364  076D                     l719:
   365                           
   366                           ;main.c: 67:     TRISD = 0x00;
   367  076D  0188               	clrf	8	;volatile
   368  076E                     l721:
   369                           
   370                           ;main.c: 70:     Lcd_CmdWrite(0x38);
   371  076E  3038               	movlw	56
   372  076F  120A  118A  272E  120A  118A  	fcall	_Lcd_CmdWrite
   373  0774                     l723:
   374                           
   375                           ;main.c: 71:     Lcd_CmdWrite(0x0E);
   376  0774  300E               	movlw	14
   377  0775  120A  118A  272E  120A  118A  	fcall	_Lcd_CmdWrite
   378  077A                     l725:
   379                           
   380                           ;main.c: 72:     Lcd_CmdWrite(0x01);
   381  077A  3001               	movlw	1
   382  077B  120A  118A  272E  120A  118A  	fcall	_Lcd_CmdWrite
   383  0780                     l727:
   384                           
   385                           ;main.c: 73:     Lcd_CmdWrite(0x80);
   386  0780  3080               	movlw	128
   387  0781  120A  118A  272E  120A  118A  	fcall	_Lcd_CmdWrite
   388  0786                     l729:
   389                           
   390                           ;main.c: 76:     Lcd_DataWrite('H');
   391  0786  3048               	movlw	72
   392  0787  120A  118A  270A  120A  118A  	fcall	_Lcd_DataWrite
   393  078C                     l731:
   394                           
   395                           ;main.c: 77:     Lcd_DataWrite('e');
   396  078C  3065               	movlw	101
   397  078D  120A  118A  270A  120A  118A  	fcall	_Lcd_DataWrite
   398  0792                     l733:
   399                           
   400                           ;main.c: 78:     Lcd_DataWrite('l');
   401  0792  306C               	movlw	108
   402  0793  120A  118A  270A  120A  118A  	fcall	_Lcd_DataWrite
   403  0798                     l735:
   404                           
   405                           ;main.c: 79:     Lcd_DataWrite('l');
   406  0798  306C               	movlw	108
   407  0799  120A  118A  270A  120A  118A  	fcall	_Lcd_DataWrite
   408  079E                     l737:
   409                           
   410                           ;main.c: 80:     Lcd_DataWrite('o');
   411  079E  306F               	movlw	111
   412  079F  120A  118A  270A  120A  118A  	fcall	_Lcd_DataWrite
   413  07A4                     l739:
   414                           
   415                           ;main.c: 81:     Lcd_DataWrite(' ');
   416  07A4  3020               	movlw	32
   417  07A5  120A  118A  270A  120A  118A  	fcall	_Lcd_DataWrite
   418  07AA                     l741:
   419                           
   420                           ;main.c: 82:     Lcd_DataWrite('w');
   421  07AA  3077               	movlw	119
   422  07AB  120A  118A  270A  120A  118A  	fcall	_Lcd_DataWrite
   423  07B0                     l743:
   424                           
   425                           ;main.c: 83:     Lcd_DataWrite('o');
   426  07B0  306F               	movlw	111
   427  07B1  120A  118A  270A  120A  118A  	fcall	_Lcd_DataWrite
   428  07B6                     l745:
   429                           
   430                           ;main.c: 84:     Lcd_DataWrite('r');
   431  07B6  3072               	movlw	114
   432  07B7  120A  118A  270A  120A  118A  	fcall	_Lcd_DataWrite
   433  07BC                     l747:
   434                           
   435                           ;main.c: 85:     Lcd_DataWrite('l');
   436  07BC  306C               	movlw	108
   437  07BD  120A  118A  270A  120A  118A  	fcall	_Lcd_DataWrite
   438  07C2                     l749:
   439                           
   440                           ;main.c: 86:     Lcd_DataWrite('d');
   441  07C2  3064               	movlw	100
   442  07C3  120A  118A  270A  120A  118A  	fcall	_Lcd_DataWrite
   443  07C8                     l751:
   444                           
   445                           ;main.c: 88:     Lcd_CmdWrite(0xc0);
   446  07C8  30C0               	movlw	192
   447  07C9  120A  118A  272E  120A  118A  	fcall	_Lcd_CmdWrite
   448  07CE                     l753:
   449                           
   450                           ;main.c: 89:     for(i = 0; a[i] != 0; i++)
   451  07CE  1283               	bcf	3,5	;RP0=0, select bank0
   452  07CF  1303               	bcf	3,6	;RP1=0, select bank0
   453  07D0  01AE               	clrf	main@i
   454  07D1  2FE1               	goto	l759
   455  07D2                     l755:
   456                           
   457                           ;main.c: 90:     {;main.c: 91:         Lcd_DataWrite(a[i]);
   458  07D2  082E               	movf	main@i,w
   459  07D3  3E20               	addlw	(low (main@a| 0))& (0+255)
   460  07D4  0084               	movwf	4
   461  07D5  0800               	movf	0,w
   462  07D6  120A  118A  270A  120A  118A  	fcall	_Lcd_DataWrite
   463  07DB                     l757:
   464                           
   465                           ;main.c: 92:     }
   466  07DB  3001               	movlw	1
   467  07DC  00FF               	movwf	btemp+1
   468  07DD  087F               	movf	btemp+1,w
   469  07DE  1283               	bcf	3,5	;RP0=0, select bank0
   470  07DF  1303               	bcf	3,6	;RP1=0, select bank0
   471  07E0  07AE               	addwf	main@i,f
   472  07E1                     l759:
   473  07E1  082E               	movf	main@i,w
   474  07E2  3E20               	addlw	(low (main@a| 0))& (0+255)
   475  07E3  0084               	movwf	4
   476  07E4  1383               	bcf	3,7	;select IRP bank0
   477  07E5  0800               	movf	0,w
   478  07E6  1D03               	btfss	3,2
   479  07E7  2FE9               	goto	u41
   480  07E8  2FEA               	goto	u40
   481  07E9                     u41:
   482  07E9  2FD2               	goto	l755
   483  07EA                     u40:
   484  07EA                     l26:	
   485                           ;main.c: 94:     while(1);
   486                           
   487  07EA  2FEA               	goto	l26
   488  07EB  120A  118A  2800   	ljmp	start
   489  07EE                     __end_of_main:
   490                           
   491                           	psect	text1
   492  070A                     __ptext1:	
   493 ;; *************** function _Lcd_DataWrite *****************
   494 ;; Defined at:
   495 ;;		line 50 in file "main.c"
   496 ;; Parameters:    Size  Location     Type
   497 ;;  data            1    wreg     unsigned char 
   498 ;; Auto vars:     Size  Location     Type
   499 ;;  data            1    2[COMMON] unsigned char 
   500 ;; Return value:  Size  Location     Type
   501 ;;                  1    wreg      void 
   502 ;; Registers used:
   503 ;;		wreg, status,2, status,0, btemp+1
   504 ;; Tracked objects:
   505 ;;		On entry : 0/0
   506 ;;		On exit  : 0/0
   507 ;;		Unchanged: 0/0
   508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   509 ;;      Params:         0       0       0       0       0
   510 ;;      Locals:         1       0       0       0       0
   511 ;;      Temps:          2       0       0       0       0
   512 ;;      Totals:         3       0       0       0       0
   513 ;;Total ram usage:        3 bytes
   514 ;; Hardware stack levels used:    1
   515 ;; This function calls:
   516 ;;		Nothing
   517 ;; This function is called by:
   518 ;;		_main
   519 ;; This function uses a non-reentrant model
   520 ;;
   521                           
   522                           
   523                           ;psect for function _Lcd_DataWrite
   524  070A                     _Lcd_DataWrite:
   525                           
   526                           ;incstack = 0
   527                           ; Regs used in _Lcd_DataWrite: [wreg+status,2+status,0+btemp+1]
   528                           ;Lcd_DataWrite@data stored from wreg
   529  070A  00F2               	movwf	Lcd_DataWrite@data
   530  070B                     l703:
   531                           
   532                           ;main.c: 50: void Lcd_DataWrite(char data);main.c: 51: {;main.c: 52:     PORTB = data;
   533  070B  0872               	movf	Lcd_DataWrite@data,w
   534  070C  1283               	bcf	3,5	;RP0=0, select bank0
   535  070D  1303               	bcf	3,6	;RP1=0, select bank0
   536  070E  0086               	movwf	6	;volatile
   537  070F                     l705:
   538                           
   539                           ;main.c: 53:     PORTD |= (1<<0);
   540  070F  1408               	bsf	8,0	;volatile
   541  0710                     l707:
   542                           
   543                           ;main.c: 54:     PORTD &= ~(1<<1);
   544  0710  30FD               	movlw	253
   545  0711  00FF               	movwf	btemp+1
   546  0712  087F               	movf	btemp+1,w
   547  0713  0588               	andwf	8,f	;volatile
   548  0714                     l709:
   549                           
   550                           ;main.c: 55:     PORTD |= (1<<2);
   551  0714  1508               	bsf	8,2	;volatile
   552  0715                     l711:
   553                           
   554                           ;main.c: 56:     _delay((unsigned long)((100)*(4000000/4000.0)));
   555  0715  3082               	movlw	130
   556  0716  00F1               	movwf	??_Lcd_DataWrite+1
   557  0717  30DD               	movlw	221
   558  0718  00F0               	movwf	??_Lcd_DataWrite
   559  0719                     u57:
   560  0719  0BF0               	decfsz	??_Lcd_DataWrite,f
   561  071A  2F19               	goto	u57
   562  071B  0BF1               	decfsz	??_Lcd_DataWrite+1,f
   563  071C  2F19               	goto	u57
   564  071D  2F1E               	nop2
   565                           
   566                           ;main.c: 57:     PORTD &= ~(1<<2);
   567  071E  30FB               	movlw	251
   568  071F  00FF               	movwf	btemp+1
   569  0720  087F               	movf	btemp+1,w
   570  0721  1283               	bcf	3,5	;RP0=0, select bank0
   571  0722  1303               	bcf	3,6	;RP1=0, select bank0
   572  0723  0588               	andwf	8,f	;volatile
   573  0724                     l713:
   574                           
   575                           ;main.c: 59:     _delay((unsigned long)((100)*(4000000/4000.0)));
   576  0724  3082               	movlw	130
   577  0725  00F1               	movwf	??_Lcd_DataWrite+1
   578  0726  30DD               	movlw	221
   579  0727  00F0               	movwf	??_Lcd_DataWrite
   580  0728                     u67:
   581  0728  0BF0               	decfsz	??_Lcd_DataWrite,f
   582  0729  2F28               	goto	u67
   583  072A  0BF1               	decfsz	??_Lcd_DataWrite+1,f
   584  072B  2F28               	goto	u67
   585  072C  2F2D               	nop2
   586  072D                     l16:
   587  072D  0008               	return
   588  072E                     __end_of_Lcd_DataWrite:
   589                           
   590                           	psect	text2
   591  072E                     __ptext2:	
   592 ;; *************** function _Lcd_CmdWrite *****************
   593 ;; Defined at:
   594 ;;		line 37 in file "main.c"
   595 ;; Parameters:    Size  Location     Type
   596 ;;  cmd             1    wreg     unsigned char 
   597 ;; Auto vars:     Size  Location     Type
   598 ;;  cmd             1    2[COMMON] unsigned char 
   599 ;; Return value:  Size  Location     Type
   600 ;;                  1    wreg      void 
   601 ;; Registers used:
   602 ;;		wreg, status,2, status,0, btemp+1
   603 ;; Tracked objects:
   604 ;;		On entry : 0/0
   605 ;;		On exit  : 0/0
   606 ;;		Unchanged: 0/0
   607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   608 ;;      Params:         0       0       0       0       0
   609 ;;      Locals:         1       0       0       0       0
   610 ;;      Temps:          2       0       0       0       0
   611 ;;      Totals:         3       0       0       0       0
   612 ;;Total ram usage:        3 bytes
   613 ;; Hardware stack levels used:    1
   614 ;; This function calls:
   615 ;;		Nothing
   616 ;; This function is called by:
   617 ;;		_main
   618 ;; This function uses a non-reentrant model
   619 ;;
   620                           
   621                           
   622                           ;psect for function _Lcd_CmdWrite
   623  072E                     _Lcd_CmdWrite:
   624                           
   625                           ;incstack = 0
   626                           ; Regs used in _Lcd_CmdWrite: [wreg+status,2+status,0+btemp+1]
   627                           ;Lcd_CmdWrite@cmd stored from wreg
   628  072E  00F2               	movwf	Lcd_CmdWrite@cmd
   629  072F                     l691:
   630                           
   631                           ;main.c: 37: void Lcd_CmdWrite(char cmd);main.c: 38: {;main.c: 39:     PORTB = cmd;
   632  072F  0872               	movf	Lcd_CmdWrite@cmd,w
   633  0730  1283               	bcf	3,5	;RP0=0, select bank0
   634  0731  1303               	bcf	3,6	;RP1=0, select bank0
   635  0732  0086               	movwf	6	;volatile
   636  0733                     l693:
   637                           
   638                           ;main.c: 40:     PORTD &= ~(1<<0);
   639  0733  30FE               	movlw	254
   640  0734  00FF               	movwf	btemp+1
   641  0735  087F               	movf	btemp+1,w
   642  0736  0588               	andwf	8,f	;volatile
   643  0737                     l695:
   644                           
   645                           ;main.c: 41:     PORTD &= ~(1<<1);
   646  0737  30FD               	movlw	253
   647  0738  00FF               	movwf	btemp+1
   648  0739  087F               	movf	btemp+1,w
   649  073A  0588               	andwf	8,f	;volatile
   650  073B                     l697:
   651                           
   652                           ;main.c: 42:     PORTD |= (1<<2);
   653  073B  1508               	bsf	8,2	;volatile
   654                           
   655                           ;main.c: 43:     _delay((unsigned long)((100)*(4000000/4000.0)));
   656  073C  3082               	movlw	130
   657  073D  00F1               	movwf	??_Lcd_CmdWrite+1
   658  073E  30DD               	movlw	221
   659  073F  00F0               	movwf	??_Lcd_CmdWrite
   660  0740                     u77:
   661  0740  0BF0               	decfsz	??_Lcd_CmdWrite,f
   662  0741  2F40               	goto	u77
   663  0742  0BF1               	decfsz	??_Lcd_CmdWrite+1,f
   664  0743  2F40               	goto	u77
   665  0744  2F45               	nop2
   666  0745                     l699:
   667                           
   668                           ;main.c: 44:     PORTD &= ~(1<<2);
   669  0745  30FB               	movlw	251
   670  0746  00FF               	movwf	btemp+1
   671  0747  087F               	movf	btemp+1,w
   672  0748  1283               	bcf	3,5	;RP0=0, select bank0
   673  0749  1303               	bcf	3,6	;RP1=0, select bank0
   674  074A  0588               	andwf	8,f	;volatile
   675  074B                     l701:
   676                           
   677                           ;main.c: 46:     _delay((unsigned long)((100)*(4000000/4000.0)));
   678  074B  3082               	movlw	130
   679  074C  00F1               	movwf	??_Lcd_CmdWrite+1
   680  074D  30DD               	movlw	221
   681  074E  00F0               	movwf	??_Lcd_CmdWrite
   682  074F                     u87:
   683  074F  0BF0               	decfsz	??_Lcd_CmdWrite,f
   684  0750  2F4F               	goto	u87
   685  0751  0BF1               	decfsz	??_Lcd_CmdWrite+1,f
   686  0752  2F4F               	goto	u87
   687  0753  2F54               	nop2
   688  0754                     l13:
   689  0754  0008               	return
   690  0755                     __end_of_Lcd_CmdWrite:
   691  007E                     btemp	set	126	;btemp
   692  007E                     wtemp0	set	126
   693                           
   694                           	psect	config
   695                           
   696                           ;Config register CONFIG @ 0x2007
   697                           ;	Oscillator Selection bits
   698                           ;	FOSC = XT, XT oscillator
   699                           ;	Watchdog Timer Enable bit
   700                           ;	WDTE = OFF, WDT disabled
   701                           ;	Power-up Timer Enable bit
   702                           ;	PWRTE = ON, PWRT enabled
   703                           ;	Brown-out Reset Enable bit
   704                           ;	BOREN = ON, BOR enabled
   705                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   706                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   707                           ;	Data EEPROM Memory Code Protection bit
   708                           ;	CPD = OFF, Data EEPROM code protection off
   709                           ;	Flash Program Memory Write Enable bits
   710                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   711                           ;	In-Circuit Debugger Mode bit
   712                           ;	DEBUG = 0x1, unprogrammed default
   713                           ;	Flash Program Memory Code Protection bit
   714                           ;	CP = OFF, Code protection off
   715  2007                     	org	8199
   716  2007  3F71               	dw	16241

Data Sizes:
    Strings     0
    Constant    0
    Data        14
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       7
    BANK0            80     15      29
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_Lcd_CmdWrite
    _main->_Lcd_DataWrite

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                19    19      0     137
                                              3 COMMON     4     4      0
                                              0 BANK0     15    15      0
                       _Lcd_CmdWrite
                      _Lcd_DataWrite
 ---------------------------------------------------------------------------------
 (1) _Lcd_DataWrite                                        3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_CmdWrite                                         3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_CmdWrite
   _Lcd_DataWrite

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      F      1D       5       36.2%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      7       7       1       50.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      24      12        0.0%
ABS                  0      0      24       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Wed Jun 03 22:44:11 2020

                      pc 0002                       l13 0754                       l16 072D  
                     l26 07EA                       u30 075D                       u40 07EA  
                     u41 07E9                       u57 0719                       u67 0728  
                     u77 0740                       u87 074F                       fsr 0004  
                    l701 074B                      l711 0715                      l703 070B  
                    l713 0724                      l705 070F                      l721 076E  
                    l707 0710                      l731 078C                      l723 0774  
                    l715 0755                      l709 0714                      l741 07AA  
                    l733 0792                      l725 077A                      l717 076A  
                    l751 07C8                      l743 07B0                      l735 0798  
                    l727 0780                      l719 076D                      l753 07CE  
                    l745 07B6                      l737 079E                      l729 0786  
                    l691 072F                      l755 07D2                      l747 07BC  
                    l739 07A4                      l693 0733                      l757 07DB  
                    l749 07C2                      l695 0737                      l759 07E1  
                    l697 073B                      l699 0745                      fsr0 0004  
                    indf 0000                     _main 0755                     btemp 007E  
   __end_of_Lcd_CmdWrite 0755                     start 0000                    ?_main 0070  
                  _PORTB 0006                    _PORTD 0008                    _TRISB 0086  
                  _TRISD 0088    __end_of_Lcd_DataWrite 072E                    main@a 0020  
                  main@i 002E                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 07EE             __end_of_main 07EE  
                 ??_main 0073    __size_of_Lcd_CmdWrite 0027  __end_of__initialization 07FC  
         __pcstackCOMMON 0070             __pidataBANK0 06E9             _Lcd_CmdWrite 072E  
             __pmaintext 0755                  __ptext1 070A                  __ptext2 072E  
   end_of_initialization 07FC   __size_of_Lcd_DataWrite 0024      start_initialization 07EE  
          _Lcd_DataWrite 070A               init_fetch0 06F7              __pdataBANK0 002F  
              ___latbits 0002            __pcstackBANK0 0020           ?_Lcd_DataWrite 0070  
        Lcd_CmdWrite@cmd 0072          ??_Lcd_DataWrite 0070            ?_Lcd_CmdWrite 0070  
      Lcd_DataWrite@data 0072            __size_of_main 0099                 main@F856 002F  
         ??_Lcd_CmdWrite 0070                 init_ram0 06FB  
