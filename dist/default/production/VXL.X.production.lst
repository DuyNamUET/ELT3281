

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Fri Jun 05 20:57:44 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    23                           	dabs	1,0x7E,2
    24  0000                     
    25                           ; Version 2.20
    26                           ; Generated 12/02/2020 GMT
    27                           ; 
    28                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC16F877A Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     	;# 
    60  0001                     	;# 
    61  0002                     	;# 
    62  0003                     	;# 
    63  0004                     	;# 
    64  0005                     	;# 
    65  0006                     	;# 
    66  0007                     	;# 
    67  0008                     	;# 
    68  0009                     	;# 
    69  000A                     	;# 
    70  000B                     	;# 
    71  000C                     	;# 
    72  000D                     	;# 
    73  000E                     	;# 
    74  000E                     	;# 
    75  000F                     	;# 
    76  0010                     	;# 
    77  0011                     	;# 
    78  0012                     	;# 
    79  0013                     	;# 
    80  0014                     	;# 
    81  0015                     	;# 
    82  0015                     	;# 
    83  0016                     	;# 
    84  0017                     	;# 
    85  0018                     	;# 
    86  0019                     	;# 
    87  001A                     	;# 
    88  001B                     	;# 
    89  001B                     	;# 
    90  001C                     	;# 
    91  001D                     	;# 
    92  001E                     	;# 
    93  001F                     	;# 
    94  0081                     	;# 
    95  0085                     	;# 
    96  0086                     	;# 
    97  0087                     	;# 
    98  0088                     	;# 
    99  0089                     	;# 
   100  008C                     	;# 
   101  008D                     	;# 
   102  008E                     	;# 
   103  0091                     	;# 
   104  0092                     	;# 
   105  0093                     	;# 
   106  0094                     	;# 
   107  0098                     	;# 
   108  0099                     	;# 
   109  009C                     	;# 
   110  009D                     	;# 
   111  009E                     	;# 
   112  009F                     	;# 
   113  010C                     	;# 
   114  010D                     	;# 
   115  010E                     	;# 
   116  010F                     	;# 
   117  018C                     	;# 
   118  018D                     	;# 
   119  0000                     	;# 
   120  0001                     	;# 
   121  0002                     	;# 
   122  0003                     	;# 
   123  0004                     	;# 
   124  0005                     	;# 
   125  0006                     	;# 
   126  0007                     	;# 
   127  0008                     	;# 
   128  0009                     	;# 
   129  000A                     	;# 
   130  000B                     	;# 
   131  000C                     	;# 
   132  000D                     	;# 
   133  000E                     	;# 
   134  000E                     	;# 
   135  000F                     	;# 
   136  0010                     	;# 
   137  0011                     	;# 
   138  0012                     	;# 
   139  0013                     	;# 
   140  0014                     	;# 
   141  0015                     	;# 
   142  0015                     	;# 
   143  0016                     	;# 
   144  0017                     	;# 
   145  0018                     	;# 
   146  0019                     	;# 
   147  001A                     	;# 
   148  001B                     	;# 
   149  001B                     	;# 
   150  001C                     	;# 
   151  001D                     	;# 
   152  001E                     	;# 
   153  001F                     	;# 
   154  0081                     	;# 
   155  0085                     	;# 
   156  0086                     	;# 
   157  0087                     	;# 
   158  0088                     	;# 
   159  0089                     	;# 
   160  008C                     	;# 
   161  008D                     	;# 
   162  008E                     	;# 
   163  0091                     	;# 
   164  0092                     	;# 
   165  0093                     	;# 
   166  0094                     	;# 
   167  0098                     	;# 
   168  0099                     	;# 
   169  009C                     	;# 
   170  009D                     	;# 
   171  009E                     	;# 
   172  009F                     	;# 
   173  010C                     	;# 
   174  010D                     	;# 
   175  010E                     	;# 
   176  010F                     	;# 
   177  018C                     	;# 
   178  018D                     	;# 
   179                           
   180                           	psect	idataBANK0
   181  0514                     __pidataBANK0:
   182                           
   183                           ;initializer for _humi
   184  0514  3452               	retlw	82
   185  0515  3448               	retlw	72
   186  0516  3420               	retlw	32
   187  0517  3420               	retlw	32
   188  0518  3420               	retlw	32
   189  0519  343D               	retlw	61
   190  051A  3420               	retlw	32
   191  051B  3430               	retlw	48
   192  051C  3430               	retlw	48
   193  051D  342E               	retlw	46
   194  051E  3430               	retlw	48
   195  051F  3420               	retlw	32
   196  0520  3425               	retlw	37
   197  0521  3400               	retlw	0
   198                           
   199                           ;initializer for _temp
   200  0522  3454               	retlw	84
   201  0523  3465               	retlw	101
   202  0524  346D               	retlw	109
   203  0525  3470               	retlw	112
   204  0526  3420               	retlw	32
   205  0527  343D               	retlw	61
   206  0528  3420               	retlw	32
   207  0529  3430               	retlw	48
   208  052A  3430               	retlw	48
   209  052B  342E               	retlw	46
   210  052C  3430               	retlw	48
   211  052D  3420               	retlw	32
   212  052E  3443               	retlw	67
   213  052F  3400               	retlw	0
   214  0008                     _PORTD	set	8
   215  0006                     _PORTB	set	6
   216  0080                     _TMR1ON	set	128
   217  0043                     _RD3	set	67
   218  0088                     _TRISD	set	136
   219  0086                     _TRISB	set	134
   220  0443                     _TRISD3	set	1091
   221                           
   222                           	psect	strings
   223  0003                     __pstrings:
   224  0003                     stringtab:
   225  0003                     __stringtab:
   226                           
   227                           ;	String table - string pointers are 1 byte each
   228  0003  1BFF               	btfsc	btemp+1,7
   229  0004  280D               	ljmp	stringcode
   230  0005  1383               	bcf	3,7
   231  0006  187F               	btfsc	btemp+1,0
   232  0007  1783               	bsf	3,7
   233  0008  0800               	movf	0,w
   234  0009  0A84               	incf	4,f
   235  000A  1903               	skipnz
   236  000B  0AFF               	incf	btemp+1,f
   237  000C  0008               	return
   238  000D                     stringcode:
   239  000D                     stringdir:
   240  000D  3000               	movlw	high stringdir
   241  000E  008A               	movwf	10
   242  000F  0804               	movf	4,w
   243  0010  0A84               	incf	4,f
   244  0011  0782               	addwf	2,f
   245  0012                     __stringbase:
   246  0012  3400               	retlw	0
   247  0013                     __end_of__stringtab:
   248  0013                     STR_1:
   249  0013  3445               	retlw	69	;'E'
   250  0014  3472               	retlw	114	;'r'
   251  0015  3472               	retlw	114	;'r'
   252  0016  346F               	retlw	111	;'o'
   253  0017  3472               	retlw	114	;'r'
   254  0018  3400               	retlw	0
   255                           
   256                           	psect	cinit
   257  07E7                     start_initialization:	
   258                           ; #config settings
   259                           
   260  07E7                     __initialization:
   261                           
   262                           ; Initialize objects allocated to BANK0
   263  07E7  1383               	bcf	3,7	;select IRP bank0
   264  07E8  303C               	movlw	low (__pdataBANK0+28)
   265  07E9  00FD               	movwf	btemp+-1
   266  07EA  3005               	movlw	high __pidataBANK0
   267  07EB  00FE               	movwf	btemp
   268  07EC  3014               	movlw	low __pidataBANK0
   269  07ED  00FF               	movwf	btemp+1
   270  07EE  3020               	movlw	low __pdataBANK0
   271  07EF  0084               	movwf	4
   272  07F0  120A  118A  24CF  120A  118A  	fcall	init_ram0
   273                           
   274                           ; Clear objects allocated to BANK0
   275  07F5  01C6               	clrf	__pbssBANK0& (0+127)
   276  07F6  01C7               	clrf	(__pbssBANK0+1)& (0+127)
   277                           
   278                           ; Clear objects allocated to COMMON
   279  07F7  01F8               	clrf	__pbssCOMMON& (0+127)
   280  07F8  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   281  07F9  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   282  07FA  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
   283  07FB  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
   284  07FC                     end_of_initialization:	
   285                           ;End of C runtime variable initialization code
   286                           
   287  07FC                     __end_of__initialization:
   288  07FC  0183               	clrf	3
   289  07FD  120A  118A  2EA4   	ljmp	_main	;jump to C main() function
   290                           
   291                           	psect	bssCOMMON
   292  0078                     __pbssCOMMON:
   293  0078                     _check_sum:
   294  0078                     	ds	1
   295  0079                     _rh_byte2:
   296  0079                     	ds	1
   297  007A                     _rh_byte1:
   298  007A                     	ds	1
   299  007B                     _t_byte2:
   300  007B                     	ds	1
   301  007C                     _t_byte1:
   302  007C                     	ds	1
   303                           
   304                           	psect	bssBANK0
   305  0046                     __pbssBANK0:
   306  0046                     _time_out:
   307  0046                     	ds	2
   308                           
   309                           	psect	dataBANK0
   310  0020                     __pdataBANK0:
   311  0020                     _humi:
   312  0020                     	ds	14
   313  002E                     _temp:
   314  002E                     	ds	14
   315                           
   316                           	psect	inittext
   317  04CB                     init_fetch0:	
   318                           ;	Called with low address in FSR and high address in W
   319                           
   320  04CB  087E               	movf	btemp,w
   321  04CC  008A               	movwf	10
   322  04CD  087F               	movf	btemp+1,w
   323  04CE  0082               	movwf	2
   324  04CF                     init_ram0:	
   325                           ;Called with:
   326                           ;	high address of idata address in btemp 
   327                           ;	low address of idata address in btemp+1 
   328                           ;	low address of data in FSR
   329                           ;	high address + 1 of data in btemp-1
   330                           
   331  04CF  120A  118A  24CB  120A  118A  	fcall	init_fetch0
   332  04D4  0080               	movwf	0
   333  04D5  0A84               	incf	4,f
   334  04D6  0804               	movf	4,w
   335  04D7  067D               	xorwf	btemp+-1,w
   336  04D8  1903               	btfsc	3,2
   337  04D9  3400               	retlw	0
   338  04DA  0AFF               	incf	btemp+1,f
   339  04DB  1903               	btfsc	3,2
   340  04DC  0AFE               	incf	btemp,f
   341  04DD  2CCF               	goto	init_ram0
   342                           
   343                           	psect	cstackCOMMON
   344  0070                     __pcstackCOMMON:
   345  0070                     ?_LcdCmdWrite:
   346  0070                     ??_LcdCmdWrite:	
   347                           ; 1 bytes @ 0x0
   348                           
   349  0070                     ?_LcdDataWrite:	
   350                           ; 1 bytes @ 0x0
   351                           
   352  0070                     ??_LcdDataWrite:	
   353                           ; 1 bytes @ 0x0
   354                           
   355  0070                     ?_startSignal:	
   356                           ; 1 bytes @ 0x0
   357                           
   358  0070                     ??_startSignal:	
   359                           ; 1 bytes @ 0x0
   360                           
   361  0070                     ?_checkResponse:	
   362                           ; 1 bytes @ 0x0
   363                           
   364  0070                     ??_checkResponse:	
   365                           ; 1 bytes @ 0x0
   366                           
   367  0070                     ?_readData:	
   368                           ; 1 bytes @ 0x0
   369                           
   370  0070                     ??_readData:	
   371                           ; 1 bytes @ 0x0
   372                           
   373  0070                     ?_main:	
   374                           ; 1 bytes @ 0x0
   375                           
   376  0070                     ?___awdiv:	
   377                           ; 1 bytes @ 0x0
   378                           
   379  0070                     ?___awmod:	
   380                           ; 2 bytes @ 0x0
   381                           
   382  0070                     ___awdiv@divisor:	
   383                           ; 2 bytes @ 0x0
   384                           
   385  0070                     ___awmod@divisor:	
   386                           ; 2 bytes @ 0x0
   387                           
   388                           
   389                           ; 2 bytes @ 0x0
   390  0070                     	ds	2
   391  0072                     LcdCmdWrite@cmd:
   392  0072                     LcdDataWrite@data:	
   393                           ; 1 bytes @ 0x2
   394                           
   395  0072                     readData@i:	
   396                           ; 1 bytes @ 0x2
   397                           
   398  0072                     ___awdiv@dividend:	
   399                           ; 1 bytes @ 0x2
   400                           
   401  0072                     ___awmod@dividend:	
   402                           ; 2 bytes @ 0x2
   403                           
   404                           
   405                           ; 2 bytes @ 0x2
   406  0072                     	ds	1
   407  0073                     ?_LcdPrint:
   408  0073                     readData@data:	
   409                           ; 1 bytes @ 0x3
   410                           
   411  0073                     LcdPrint@message:	
   412                           ; 1 bytes @ 0x3
   413                           
   414                           
   415                           ; 2 bytes @ 0x3
   416  0073                     	ds	1
   417  0074                     ??___awdiv:
   418  0074                     ??___awmod:	
   419                           ; 1 bytes @ 0x4
   420                           
   421  0074                     ___awdiv@counter:	
   422                           ; 1 bytes @ 0x4
   423                           
   424  0074                     ___awmod@counter:	
   425                           ; 1 bytes @ 0x4
   426                           
   427                           
   428                           ; 1 bytes @ 0x4
   429  0074                     	ds	1
   430  0075                     ??_LcdPrint:
   431  0075                     LcdPrint@i:	
   432                           ; 1 bytes @ 0x5
   433                           
   434  0075                     ___awdiv@sign:	
   435                           ; 1 bytes @ 0x5
   436                           
   437  0075                     ___awmod@sign:	
   438                           ; 1 bytes @ 0x5
   439                           
   440                           
   441                           ; 1 bytes @ 0x5
   442  0075                     	ds	1
   443  0076                     ___awdiv@quotient:
   444                           
   445                           ; 2 bytes @ 0x6
   446  0076                     	ds	2
   447                           
   448                           	psect	cstackBANK0
   449  003C                     __pcstackBANK0:
   450  003C                     ??_main:
   451                           
   452                           ; 1 bytes @ 0x0
   453  003C                     	ds	10
   454                           
   455                           	psect	maintext
   456  06A4                     __pmaintext:	
   457 ;;
   458 ;;Main: autosize = 0, tempsize = 10, incstack = 0, save=0
   459 ;;
   460 ;; *************** function _main *****************
   461 ;; Defined at:
   462 ;;		line 129 in file "main.c"
   463 ;; Parameters:    Size  Location     Type
   464 ;;		None
   465 ;; Auto vars:     Size  Location     Type
   466 ;;		None
   467 ;; Return value:  Size  Location     Type
   468 ;;                  1    wreg      void 
   469 ;; Registers used:
   470 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   471 ;; Tracked objects:
   472 ;;		On entry : B00/0
   473 ;;		On exit  : 0/0
   474 ;;		Unchanged: 0/0
   475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   476 ;;      Params:         0       0       0       0       0
   477 ;;      Locals:         0       0       0       0       0
   478 ;;      Temps:          0      10       0       0       0
   479 ;;      Totals:         0      10       0       0       0
   480 ;;Total ram usage:       10 bytes
   481 ;; Hardware stack levels required when called:    2
   482 ;; This function calls:
   483 ;;		_LcdCmdWrite
   484 ;;		_LcdPrint
   485 ;;		___awdiv
   486 ;;		___awmod
   487 ;;		_checkResponse
   488 ;;		_readData
   489 ;;		_startSignal
   490 ;; This function is called by:
   491 ;;		Startup code after reset
   492 ;; This function uses a non-reentrant model
   493 ;;
   494                           
   495                           
   496                           ;psect for function _main
   497  06A4                     _main:
   498  06A4                     l1020:	
   499                           ;incstack = 0
   500                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   501                           
   502                           
   503                           ;main.c: 132:     TRISB = 0x00;
   504  06A4  1683               	bsf	3,5	;RP0=1, select bank1
   505  06A5  1303               	bcf	3,6	;RP1=0, select bank1
   506  06A6  0186               	clrf	6	;volatile
   507                           
   508                           ;main.c: 133:     TRISD = 0x00;
   509  06A7  0188               	clrf	8	;volatile
   510  06A8                     l1022:
   511                           
   512                           ;main.c: 135:     LcdCmdWrite(0x38);
   513  06A8  3038               	movlw	56
   514  06A9  120A  118A  2530  120A  118A  	fcall	_LcdCmdWrite
   515  06AE                     l1024:
   516                           
   517                           ;main.c: 136:     LcdCmdWrite(0x0E);
   518  06AE  300E               	movlw	14
   519  06AF  120A  118A  2530  120A  118A  	fcall	_LcdCmdWrite
   520  06B4                     l1026:
   521                           
   522                           ;main.c: 139:     {;main.c: 140:         startSignal();
   523  06B4  120A  118A  24F9  120A  118A  	fcall	_startSignal
   524  06B9                     l1028:
   525                           
   526                           ;main.c: 141:         checkResponse();
   527  06B9  120A  118A  254E  120A  118A  	fcall	_checkResponse
   528  06BE                     l1030:
   529                           
   530                           ;main.c: 143:         rh_byte1 = readData();
   531  06BE  120A  118A  25A0  120A  118A  	fcall	_readData
   532  06C3  00FF               	movwf	btemp+1
   533  06C4  087F               	movf	btemp+1,w
   534  06C5  00FA               	movwf	_rh_byte1
   535  06C6                     l1032:
   536                           
   537                           ;main.c: 144:         rh_byte2 = readData();
   538  06C6  120A  118A  25A0  120A  118A  	fcall	_readData
   539  06CB  00FF               	movwf	btemp+1
   540  06CC  087F               	movf	btemp+1,w
   541  06CD  00F9               	movwf	_rh_byte2
   542  06CE                     l1034:
   543                           
   544                           ;main.c: 145:         t_byte1 = readData();
   545  06CE  120A  118A  25A0  120A  118A  	fcall	_readData
   546  06D3  00FF               	movwf	btemp+1
   547  06D4  087F               	movf	btemp+1,w
   548  06D5  00FC               	movwf	_t_byte1
   549  06D6                     l1036:
   550                           
   551                           ;main.c: 146:         t_byte2 = readData();
   552  06D6  120A  118A  25A0  120A  118A  	fcall	_readData
   553  06DB  00FF               	movwf	btemp+1
   554  06DC  087F               	movf	btemp+1,w
   555  06DD  00FB               	movwf	_t_byte2
   556  06DE                     l1038:
   557                           
   558                           ;main.c: 147:         check_sum = readData();
   559  06DE  120A  118A  25A0  120A  118A  	fcall	_readData
   560  06E3  00FF               	movwf	btemp+1
   561  06E4  087F               	movf	btemp+1,w
   562  06E5  00F8               	movwf	_check_sum
   563  06E6                     l1040:
   564                           
   565                           ;main.c: 149:         if(check_sum == ((rh_byte1 + rh_byte2 + t_byte1 + t_byte2) & 0xFF)
      +                          )
   566  06E6  087A               	movf	_rh_byte1,w
   567  06E7  0779               	addwf	_rh_byte2,w
   568  06E8  1283               	bcf	3,5	;RP0=0, select bank0
   569  06E9  1303               	bcf	3,6	;RP1=0, select bank0
   570  06EA  00BC               	movwf	??_main
   571  06EB  01BD               	clrf	??_main+1
   572  06EC  0DBD               	rlf	??_main+1,f
   573  06ED  087C               	movf	_t_byte1,w
   574  06EE  073C               	addwf	??_main,w
   575  06EF  00BE               	movwf	??_main+2
   576  06F0  3000               	movlw	0
   577  06F1  1803               	skipnc
   578  06F2  3001               	movlw	1
   579  06F3  073D               	addwf	??_main+1,w
   580  06F4  00BF               	movwf	??_main+3
   581  06F5  087B               	movf	_t_byte2,w
   582  06F6  073E               	addwf	??_main+2,w
   583  06F7  00C0               	movwf	??_main+4
   584  06F8  3000               	movlw	0
   585  06F9  1803               	skipnc
   586  06FA  3001               	movlw	1
   587  06FB  073F               	addwf	??_main+3,w
   588  06FC  00C1               	movwf	??_main+5
   589  06FD  30FF               	movlw	255
   590  06FE  0540               	andwf	??_main+4,w
   591  06FF  00C2               	movwf	??_main+6
   592  0700  3000               	movlw	0
   593  0701  0541               	andwf	??_main+5,w
   594  0702  00C3               	movwf	??_main+7
   595  0703  0878               	movf	_check_sum,w
   596  0704  00C4               	movwf	??_main+8
   597  0705  01C5               	clrf	??_main+9
   598  0706  0843               	movf	??_main+7,w
   599  0707  0645               	xorwf	??_main+9,w
   600  0708  1D03               	skipz
   601  0709  2F0C               	goto	u565
   602  070A  0842               	movf	??_main+6,w
   603  070B  0644               	xorwf	??_main+8,w
   604  070C                     u565:
   605  070C  1D03               	skipz
   606  070D  2F0F               	goto	u561
   607  070E  2F10               	goto	u560
   608  070F                     u561:
   609  070F  2FBD               	goto	l1054
   610  0710                     u560:
   611  0710                     l1042:
   612                           
   613                           ;main.c: 150:         {;main.c: 151:             temp[7] = t_byte1 / 10 + 48;
   614  0710  300A               	movlw	10
   615  0711  00F0               	movwf	___awdiv@divisor
   616  0712  3000               	movlw	0
   617  0713  00F1               	movwf	___awdiv@divisor+1
   618  0714  087C               	movf	_t_byte1,w
   619  0715  00BC               	movwf	??_main
   620  0716  01BD               	clrf	??_main+1
   621  0717  083C               	movf	??_main,w
   622  0718  00F2               	movwf	___awdiv@dividend
   623  0719  083D               	movf	??_main+1,w
   624  071A  00F3               	movwf	___awdiv@dividend+1
   625  071B  120A  118A  263D  120A  118A  	fcall	___awdiv
   626  0720  0870               	movf	?___awdiv,w
   627  0721  3E30               	addlw	48
   628  0722  00FF               	movwf	btemp+1
   629  0723  087F               	movf	btemp+1,w
   630  0724  1283               	bcf	3,5	;RP0=0, select bank0
   631  0725  1303               	bcf	3,6	;RP1=0, select bank0
   632  0726  00B5               	movwf	_temp+7
   633                           
   634                           ;main.c: 152:             temp[8] = t_byte1 % 10 + 48;
   635  0727  300A               	movlw	10
   636  0728  00F0               	movwf	___awmod@divisor
   637  0729  3000               	movlw	0
   638  072A  00F1               	movwf	___awmod@divisor+1
   639  072B  087C               	movf	_t_byte1,w
   640  072C  00BC               	movwf	??_main
   641  072D  01BD               	clrf	??_main+1
   642  072E  083C               	movf	??_main,w
   643  072F  00F2               	movwf	___awmod@dividend
   644  0730  083D               	movf	??_main+1,w
   645  0731  00F3               	movwf	___awmod@dividend+1
   646  0732  120A  118A  25E4  120A  118A  	fcall	___awmod
   647  0737  0870               	movf	?___awmod,w
   648  0738  3E30               	addlw	48
   649  0739  00FF               	movwf	btemp+1
   650  073A  087F               	movf	btemp+1,w
   651  073B  1283               	bcf	3,5	;RP0=0, select bank0
   652  073C  1303               	bcf	3,6	;RP1=0, select bank0
   653  073D  00B6               	movwf	_temp+8
   654                           
   655                           ;main.c: 153:             temp[10] = t_byte2 / 10 + 48;
   656  073E  300A               	movlw	10
   657  073F  00F0               	movwf	___awdiv@divisor
   658  0740  3000               	movlw	0
   659  0741  00F1               	movwf	___awdiv@divisor+1
   660  0742  087B               	movf	_t_byte2,w
   661  0743  00BC               	movwf	??_main
   662  0744  01BD               	clrf	??_main+1
   663  0745  083C               	movf	??_main,w
   664  0746  00F2               	movwf	___awdiv@dividend
   665  0747  083D               	movf	??_main+1,w
   666  0748  00F3               	movwf	___awdiv@dividend+1
   667  0749  120A  118A  263D  120A  118A  	fcall	___awdiv
   668  074E  0870               	movf	?___awdiv,w
   669  074F  3E30               	addlw	48
   670  0750  00FF               	movwf	btemp+1
   671  0751  087F               	movf	btemp+1,w
   672  0752  1283               	bcf	3,5	;RP0=0, select bank0
   673  0753  1303               	bcf	3,6	;RP1=0, select bank0
   674  0754  00B8               	movwf	_temp+10
   675                           
   676                           ;main.c: 155:             humi[7] = rh_byte1 / 10 + 48;
   677  0755  300A               	movlw	10
   678  0756  00F0               	movwf	___awdiv@divisor
   679  0757  3000               	movlw	0
   680  0758  00F1               	movwf	___awdiv@divisor+1
   681  0759  087A               	movf	_rh_byte1,w
   682  075A  00BC               	movwf	??_main
   683  075B  01BD               	clrf	??_main+1
   684  075C  083C               	movf	??_main,w
   685  075D  00F2               	movwf	___awdiv@dividend
   686  075E  083D               	movf	??_main+1,w
   687  075F  00F3               	movwf	___awdiv@dividend+1
   688  0760  120A  118A  263D  120A  118A  	fcall	___awdiv
   689  0765  0870               	movf	?___awdiv,w
   690  0766  3E30               	addlw	48
   691  0767  00FF               	movwf	btemp+1
   692  0768  087F               	movf	btemp+1,w
   693  0769  1283               	bcf	3,5	;RP0=0, select bank0
   694  076A  1303               	bcf	3,6	;RP1=0, select bank0
   695  076B  00A7               	movwf	_humi+7
   696                           
   697                           ;main.c: 156:             humi[8] = rh_byte1 % 10 + 48;
   698  076C  300A               	movlw	10
   699  076D  00F0               	movwf	___awmod@divisor
   700  076E  3000               	movlw	0
   701  076F  00F1               	movwf	___awmod@divisor+1
   702  0770  087A               	movf	_rh_byte1,w
   703  0771  00BC               	movwf	??_main
   704  0772  01BD               	clrf	??_main+1
   705  0773  083C               	movf	??_main,w
   706  0774  00F2               	movwf	___awmod@dividend
   707  0775  083D               	movf	??_main+1,w
   708  0776  00F3               	movwf	___awmod@dividend+1
   709  0777  120A  118A  25E4  120A  118A  	fcall	___awmod
   710  077C  0870               	movf	?___awmod,w
   711  077D  3E30               	addlw	48
   712  077E  00FF               	movwf	btemp+1
   713  077F  087F               	movf	btemp+1,w
   714  0780  1283               	bcf	3,5	;RP0=0, select bank0
   715  0781  1303               	bcf	3,6	;RP1=0, select bank0
   716  0782  00A8               	movwf	_humi+8
   717                           
   718                           ;main.c: 157:             humi[10] = rh_byte2 / 10 + 48;
   719  0783  300A               	movlw	10
   720  0784  00F0               	movwf	___awdiv@divisor
   721  0785  3000               	movlw	0
   722  0786  00F1               	movwf	___awdiv@divisor+1
   723  0787  0879               	movf	_rh_byte2,w
   724  0788  00BC               	movwf	??_main
   725  0789  01BD               	clrf	??_main+1
   726  078A  083C               	movf	??_main,w
   727  078B  00F2               	movwf	___awdiv@dividend
   728  078C  083D               	movf	??_main+1,w
   729  078D  00F3               	movwf	___awdiv@dividend+1
   730  078E  120A  118A  263D  120A  118A  	fcall	___awdiv
   731  0793  0870               	movf	?___awdiv,w
   732  0794  3E30               	addlw	48
   733  0795  00FF               	movwf	btemp+1
   734  0796  087F               	movf	btemp+1,w
   735  0797  1283               	bcf	3,5	;RP0=0, select bank0
   736  0798  1303               	bcf	3,6	;RP1=0, select bank0
   737  0799  00AA               	movwf	_humi+10
   738  079A                     l1044:
   739                           
   740                           ;main.c: 158:             temp[11] = 223;
   741  079A  30DF               	movlw	223
   742  079B  00FF               	movwf	btemp+1
   743  079C  087F               	movf	btemp+1,w
   744  079D  00B9               	movwf	_temp+11
   745  079E                     l1046:
   746                           
   747                           ;main.c: 160:             LcdCmdWrite(0x80);
   748  079E  3080               	movlw	128
   749  079F  120A  118A  2530  120A  118A  	fcall	_LcdCmdWrite
   750  07A4                     l1048:
   751                           
   752                           ;main.c: 161:             LcdPrint(temp);
   753  07A4  302E               	movlw	(low (_temp| 0))& (0+255)
   754  07A5  00F3               	movwf	LcdPrint@message
   755  07A6  3000               	movlw	0
   756  07A7  00F4               	movwf	LcdPrint@message+1
   757  07A8  120A  118A  2575  120A  118A  	fcall	_LcdPrint
   758  07AD                     l1050:
   759                           
   760                           ;main.c: 163:             LcdCmdWrite(0xC0);
   761  07AD  30C0               	movlw	192
   762  07AE  120A  118A  2530  120A  118A  	fcall	_LcdCmdWrite
   763  07B3                     l1052:
   764                           
   765                           ;main.c: 164:             LcdPrint(humi);
   766  07B3  3020               	movlw	(low (_humi| 0))& (0+255)
   767  07B4  00F3               	movwf	LcdPrint@message
   768  07B5  3000               	movlw	0
   769  07B6  00F4               	movwf	LcdPrint@message+1
   770  07B7  120A  118A  2575  120A  118A  	fcall	_LcdPrint
   771                           
   772                           ;main.c: 165:         }
   773  07BC  2FD2               	goto	l1058
   774  07BD                     l1054:
   775                           
   776                           ;main.c: 167:         {;main.c: 168:             LcdCmdWrite(0x01);
   777  07BD  3001               	movlw	1
   778  07BE  120A  118A  2530  120A  118A  	fcall	_LcdCmdWrite
   779                           
   780                           ;main.c: 169:             LcdCmdWrite(0x80);
   781  07C3  3080               	movlw	128
   782  07C4  120A  118A  2530  120A  118A  	fcall	_LcdCmdWrite
   783  07C9                     l1056:
   784                           
   785                           ;main.c: 170:             LcdPrint("Error");
   786  07C9  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   787  07CA  00F3               	movwf	LcdPrint@message
   788  07CB  3080               	movlw	128
   789  07CC  00F4               	movwf	LcdPrint@message+1
   790  07CD  120A  118A  2575  120A  118A  	fcall	_LcdPrint
   791  07D2                     l1058:
   792                           
   793                           ;main.c: 172:         TMR1ON = 0;
   794  07D2  1283               	bcf	3,5	;RP0=0, select bank0
   795  07D3  1303               	bcf	3,6	;RP1=0, select bank0
   796  07D4  1010               	bcf	16,0	;volatile
   797  07D5                     l1060:
   798                           
   799                           ;main.c: 173:         _delay((unsigned long)((1000)*(8000000/4000.0)));
   800  07D5  300B               	movlw	11
   801  07D6  1283               	bcf	3,5	;RP0=0, select bank0
   802  07D7  1303               	bcf	3,6	;RP1=0, select bank0
   803  07D8  00BE               	movwf	??_main+2
   804  07D9  3026               	movlw	38
   805  07DA  00BD               	movwf	??_main+1
   806  07DB  305D               	movlw	93
   807  07DC  00BC               	movwf	??_main
   808  07DD                     u577:
   809  07DD  0BBC               	decfsz	??_main,f
   810  07DE  2FDD               	goto	u577
   811  07DF  0BBD               	decfsz	??_main+1,f
   812  07E0  2FDD               	goto	u577
   813  07E1  0BBE               	decfsz	??_main+2,f
   814  07E2  2FDD               	goto	u577
   815  07E3  2EB4               	goto	l1026
   816  07E4  120A  118A  2800   	ljmp	start
   817  07E7                     __end_of_main:
   818                           
   819                           	psect	text1
   820  04F9                     __ptext1:	
   821 ;; *************** function _startSignal *****************
   822 ;; Defined at:
   823 ;;		line 90 in file "main.c"
   824 ;; Parameters:    Size  Location     Type
   825 ;;		None
   826 ;; Auto vars:     Size  Location     Type
   827 ;;		None
   828 ;; Return value:  Size  Location     Type
   829 ;;                  1    wreg      void 
   830 ;; Registers used:
   831 ;;		wreg
   832 ;; Tracked objects:
   833 ;;		On entry : 0/0
   834 ;;		On exit  : 0/0
   835 ;;		Unchanged: 0/0
   836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   837 ;;      Params:         0       0       0       0       0
   838 ;;      Locals:         0       0       0       0       0
   839 ;;      Temps:          2       0       0       0       0
   840 ;;      Totals:         2       0       0       0       0
   841 ;;Total ram usage:        2 bytes
   842 ;; Hardware stack levels used:    1
   843 ;; This function calls:
   844 ;;		Nothing
   845 ;; This function is called by:
   846 ;;		_main
   847 ;; This function uses a non-reentrant model
   848 ;;
   849                           
   850                           
   851                           ;psect for function _startSignal
   852  04F9                     _startSignal:
   853  04F9                     l896:	
   854                           ;incstack = 0
   855                           ; Regs used in _startSignal: [wreg]
   856                           
   857                           
   858                           ;main.c: 92:     TRISD3 = 0;
   859  04F9  1683               	bsf	3,5	;RP0=1, select bank1
   860  04FA  1303               	bcf	3,6	;RP1=0, select bank1
   861  04FB  1188               	bcf	8,3	;volatile
   862                           
   863                           ;main.c: 93:     RD3 = 0;
   864  04FC  1283               	bcf	3,5	;RP0=0, select bank0
   865  04FD  1303               	bcf	3,6	;RP1=0, select bank0
   866  04FE  1188               	bcf	8,3	;volatile
   867  04FF                     l898:
   868                           
   869                           ;main.c: 95:     _delay((unsigned long)((25)*(8000000/4000.0)));
   870  04FF  3041               	movlw	65
   871  0500  00F1               	movwf	??_startSignal+1
   872  0501  30EE               	movlw	238
   873  0502  00F0               	movwf	??_startSignal
   874  0503                     u587:
   875  0503  0BF0               	decfsz	??_startSignal,f
   876  0504  2D03               	goto	u587
   877  0505  0BF1               	decfsz	??_startSignal+1,f
   878  0506  2D03               	goto	u587
   879  0507  0000               	nop
   880  0508                     l900:
   881                           
   882                           ;main.c: 96:     RD3 = 1;
   883  0508  1283               	bcf	3,5	;RP0=0, select bank0
   884  0509  1303               	bcf	3,6	;RP1=0, select bank0
   885  050A  1588               	bsf	8,3	;volatile
   886                           
   887                           ;main.c: 97:     _delay((unsigned long)((30)*(8000000/4000000.0)));
   888  050B  3013               	movlw	19
   889  050C  00F0               	movwf	??_startSignal
   890  050D                     u597:
   891  050D  0BF0               	decfsz	??_startSignal,f
   892  050E  2D0D               	goto	u597
   893  050F  2D10               	nop2
   894  0510                     l902:
   895                           
   896                           ;main.c: 98:     TRISD3 = 1;
   897  0510  1683               	bsf	3,5	;RP0=1, select bank1
   898  0511  1303               	bcf	3,6	;RP1=0, select bank1
   899  0512  1588               	bsf	8,3	;volatile
   900  0513                     l47:
   901  0513  0008               	return
   902  0514                     __end_of_startSignal:
   903                           
   904                           	psect	text2
   905  05A0                     __ptext2:	
   906 ;; *************** function _readData *****************
   907 ;; Defined at:
   908 ;;		line 110 in file "main.c"
   909 ;; Parameters:    Size  Location     Type
   910 ;;		None
   911 ;; Auto vars:     Size  Location     Type
   912 ;;  data            1    3[COMMON] unsigned char 
   913 ;;  i               1    2[COMMON] unsigned char 
   914 ;; Return value:  Size  Location     Type
   915 ;;                  1    wreg      unsigned char 
   916 ;; Registers used:
   917 ;;		wreg, status,2, status,0, btemp+1
   918 ;; Tracked objects:
   919 ;;		On entry : 0/0
   920 ;;		On exit  : 0/0
   921 ;;		Unchanged: 0/0
   922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   923 ;;      Params:         0       0       0       0       0
   924 ;;      Locals:         2       0       0       0       0
   925 ;;      Temps:          2       0       0       0       0
   926 ;;      Totals:         4       0       0       0       0
   927 ;;Total ram usage:        4 bytes
   928 ;; Hardware stack levels used:    1
   929 ;; This function calls:
   930 ;;		Nothing
   931 ;; This function is called by:
   932 ;;		_main
   933 ;; This function uses a non-reentrant model
   934 ;;
   935                           
   936                           
   937                           ;psect for function _readData
   938  05A0                     _readData:
   939  05A0                     l912:	
   940                           ;incstack = 0
   941                           ; Regs used in _readData: [wreg+status,2+status,0+btemp+1]
   942                           
   943                           
   944                           ;main.c: 112:     char i,data = 0;
   945  05A0  01F3               	clrf	readData@data
   946                           
   947                           ;main.c: 113:     for(i = 0; i < 8; i++)
   948  05A1  01F2               	clrf	readData@i
   949  05A2                     l918:
   950  05A2  1003               	clrc
   951  05A3  1283               	bcf	3,5	;RP0=0, select bank0
   952  05A4  1303               	bcf	3,6	;RP1=0, select bank0
   953  05A5  1988               	btfsc	8,3	;volatile
   954  05A6  1403               	setc
   955  05A7  3000               	movlw	0
   956  05A8  1803               	skipnc
   957  05A9  3001               	movlw	1
   958  05AA  00F0               	movwf	??_readData
   959  05AB  01F1               	clrf	??_readData+1
   960  05AC  1C70               	btfss	??_readData,0
   961  05AD  2DAF               	goto	u331
   962  05AE  2DB0               	goto	u330
   963  05AF                     u331:
   964  05AF  2DA2               	goto	l918
   965  05B0                     u330:
   966  05B0                     l920:
   967                           
   968                           ;main.c: 116:         _delay((unsigned long)((30)*(8000000/4000000.0)));
   969  05B0  3013               	movlw	19
   970  05B1  00F0               	movwf	??_readData
   971  05B2                     u607:
   972  05B2  0BF0               	decfsz	??_readData,f
   973  05B3  2DB2               	goto	u607
   974  05B4  2DB5               	nop2
   975  05B5                     l922:
   976                           
   977                           ;main.c: 117:         if(RD3 & 1)
   978  05B5  1003               	clrc
   979  05B6  1283               	bcf	3,5	;RP0=0, select bank0
   980  05B7  1303               	bcf	3,6	;RP1=0, select bank0
   981  05B8  1988               	btfsc	8,3	;volatile
   982  05B9  1403               	setc
   983  05BA  3000               	movlw	0
   984  05BB  1803               	skipnc
   985  05BC  3001               	movlw	1
   986  05BD  00F0               	movwf	??_readData
   987  05BE  01F1               	clrf	??_readData+1
   988  05BF  1C70               	btfss	??_readData,0
   989  05C0  2DC2               	goto	u341
   990  05C1  2DC3               	goto	u340
   991  05C2                     u341:
   992  05C2  2DC6               	goto	l926
   993  05C3                     u340:
   994  05C3                     l924:
   995                           
   996                           ;main.c: 118:             data = ((data<<1) | 1);
   997  05C3  1403               	setc
   998  05C4  0DF3               	rlf	readData@data,f
   999  05C5  2DCC               	goto	l928
  1000  05C6                     l926:
  1001                           
  1002                           ;main.c: 120:             data = (data<<1);
  1003  05C6  0873               	movf	readData@data,w
  1004  05C7  00F0               	movwf	??_readData
  1005  05C8  0770               	addwf	??_readData,w
  1006  05C9  00FF               	movwf	btemp+1
  1007  05CA  087F               	movf	btemp+1,w
  1008  05CB  00F3               	movwf	readData@data
  1009  05CC                     l928:
  1010  05CC  1003               	clrc
  1011  05CD  1988               	btfsc	8,3	;volatile
  1012  05CE  1403               	setc
  1013  05CF  3000               	movlw	0
  1014  05D0  1803               	skipnc
  1015  05D1  3001               	movlw	1
  1016  05D2  00F0               	movwf	??_readData
  1017  05D3  01F1               	clrf	??_readData+1
  1018  05D4  1870               	btfsc	??_readData,0
  1019  05D5  2DD7               	goto	u351
  1020  05D6  2DD8               	goto	u350
  1021  05D7                     u351:
  1022  05D7  2DCC               	goto	l928
  1023  05D8                     u350:
  1024  05D8                     l930:
  1025                           
  1026                           ;main.c: 122:     }
  1027  05D8  3001               	movlw	1
  1028  05D9  00FF               	movwf	btemp+1
  1029  05DA  087F               	movf	btemp+1,w
  1030  05DB  07F2               	addwf	readData@i,f
  1031  05DC                     l932:
  1032  05DC  3008               	movlw	8
  1033  05DD  0272               	subwf	readData@i,w
  1034  05DE  1C03               	skipc
  1035  05DF  2DE1               	goto	u361
  1036  05E0  2DE2               	goto	u360
  1037  05E1                     u361:
  1038  05E1  2DA2               	goto	l918
  1039  05E2                     u360:
  1040  05E2                     l934:
  1041                           
  1042                           ;main.c: 123:     return data;
  1043  05E2  0873               	movf	readData@data,w
  1044  05E3                     l72:
  1045  05E3  0008               	return
  1046  05E4                     __end_of_readData:
  1047                           
  1048                           	psect	text3
  1049  054E                     __ptext3:	
  1050 ;; *************** function _checkResponse *****************
  1051 ;; Defined at:
  1052 ;;		line 102 in file "main.c"
  1053 ;; Parameters:    Size  Location     Type
  1054 ;;		None
  1055 ;; Auto vars:     Size  Location     Type
  1056 ;;		None
  1057 ;; Return value:  Size  Location     Type
  1058 ;;                  1    wreg      void 
  1059 ;; Registers used:
  1060 ;;		wreg, status,0
  1061 ;; Tracked objects:
  1062 ;;		On entry : 0/0
  1063 ;;		On exit  : 0/0
  1064 ;;		Unchanged: 0/0
  1065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1066 ;;      Params:         0       0       0       0       0
  1067 ;;      Locals:         0       0       0       0       0
  1068 ;;      Temps:          2       0       0       0       0
  1069 ;;      Totals:         2       0       0       0       0
  1070 ;;Total ram usage:        2 bytes
  1071 ;; Hardware stack levels used:    1
  1072 ;; This function calls:
  1073 ;;		Nothing
  1074 ;; This function is called by:
  1075 ;;		_main
  1076 ;; This function uses a non-reentrant model
  1077 ;;
  1078                           
  1079                           
  1080                           ;psect for function _checkResponse
  1081  054E                     _checkResponse:
  1082  054E                     l904:	
  1083                           ;incstack = 0
  1084                           ; Regs used in _checkResponse: [wreg+status,0]
  1085                           
  1086  054E                     l906:	
  1087                           ;main.c: 104:     while(RD3 & 1);
  1088                           
  1089  054E  1003               	clrc
  1090  054F  1283               	bcf	3,5	;RP0=0, select bank0
  1091  0550  1303               	bcf	3,6	;RP1=0, select bank0
  1092  0551  1988               	btfsc	8,3	;volatile
  1093  0552  1403               	setc
  1094  0553  3000               	movlw	0
  1095  0554  1803               	skipnc
  1096  0555  3001               	movlw	1
  1097  0556  00F0               	movwf	??_checkResponse
  1098  0557  01F1               	clrf	??_checkResponse+1
  1099  0558  1870               	btfsc	??_checkResponse,0
  1100  0559  2D5B               	goto	u301
  1101  055A  2D5C               	goto	u300
  1102  055B                     u301:
  1103  055B  2D4E               	goto	l906
  1104  055C                     u300:
  1105  055C                     l908:
  1106  055C  1003               	clrc
  1107  055D  1988               	btfsc	8,3	;volatile
  1108  055E  1403               	setc
  1109  055F  3000               	movlw	0
  1110  0560  1803               	skipnc
  1111  0561  3001               	movlw	1
  1112  0562  00F0               	movwf	??_checkResponse
  1113  0563  01F1               	clrf	??_checkResponse+1
  1114  0564  1C70               	btfss	??_checkResponse,0
  1115  0565  2D67               	goto	u311
  1116  0566  2D68               	goto	u310
  1117  0567                     u311:
  1118  0567  2D5C               	goto	l908
  1119  0568                     u310:
  1120  0568                     l910:
  1121  0568  1003               	clrc
  1122  0569  1988               	btfsc	8,3	;volatile
  1123  056A  1403               	setc
  1124  056B  3000               	movlw	0
  1125  056C  1803               	skipnc
  1126  056D  3001               	movlw	1
  1127  056E  00F0               	movwf	??_checkResponse
  1128  056F  01F1               	clrf	??_checkResponse+1
  1129  0570  1870               	btfsc	??_checkResponse,0
  1130  0571  2D73               	goto	u321
  1131  0572  2D74               	goto	u320
  1132  0573                     u321:
  1133  0573  2D68               	goto	l910
  1134  0574                     u320:
  1135  0574                     l59:
  1136  0574  0008               	return
  1137  0575                     __end_of_checkResponse:
  1138                           
  1139                           	psect	text4
  1140  05E4                     __ptext4:	
  1141 ;; *************** function ___awmod *****************
  1142 ;; Defined at:
  1143 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\awmod.c"
  1144 ;; Parameters:    Size  Location     Type
  1145 ;;  divisor         2    0[COMMON] int 
  1146 ;;  dividend        2    2[COMMON] int 
  1147 ;; Auto vars:     Size  Location     Type
  1148 ;;  sign            1    5[COMMON] unsigned char 
  1149 ;;  counter         1    4[COMMON] unsigned char 
  1150 ;; Return value:  Size  Location     Type
  1151 ;;                  2    0[COMMON] int 
  1152 ;; Registers used:
  1153 ;;		wreg, status,2, status,0, btemp+1
  1154 ;; Tracked objects:
  1155 ;;		On entry : 0/0
  1156 ;;		On exit  : 0/0
  1157 ;;		Unchanged: 0/0
  1158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1159 ;;      Params:         4       0       0       0       0
  1160 ;;      Locals:         2       0       0       0       0
  1161 ;;      Temps:          0       0       0       0       0
  1162 ;;      Totals:         6       0       0       0       0
  1163 ;;Total ram usage:        6 bytes
  1164 ;; Hardware stack levels used:    1
  1165 ;; This function calls:
  1166 ;;		Nothing
  1167 ;; This function is called by:
  1168 ;;		_main
  1169 ;; This function uses a non-reentrant model
  1170 ;;
  1171                           
  1172                           
  1173                           ;psect for function ___awmod
  1174  05E4                     ___awmod:
  1175  05E4                     l982:	
  1176                           ;incstack = 0
  1177                           ; Regs used in ___awmod: [wreg+status,2+status,0+btemp+1]
  1178                           
  1179  05E4  01F5               	clrf	___awmod@sign
  1180  05E5                     l984:
  1181  05E5  1FF3               	btfss	___awmod@dividend+1,7
  1182  05E6  2DE8               	goto	u471
  1183  05E7  2DE9               	goto	u470
  1184  05E8                     u471:
  1185  05E8  2DF0               	goto	l990
  1186  05E9                     u470:
  1187  05E9                     l986:
  1188  05E9  09F2               	comf	___awmod@dividend,f
  1189  05EA  09F3               	comf	___awmod@dividend+1,f
  1190  05EB  0AF2               	incf	___awmod@dividend,f
  1191  05EC  1903               	skipnz
  1192  05ED  0AF3               	incf	___awmod@dividend+1,f
  1193  05EE                     l988:
  1194  05EE  01F5               	clrf	___awmod@sign
  1195  05EF  0AF5               	incf	___awmod@sign,f
  1196  05F0                     l990:
  1197  05F0  1FF1               	btfss	___awmod@divisor+1,7
  1198  05F1  2DF3               	goto	u481
  1199  05F2  2DF4               	goto	u480
  1200  05F3                     u481:
  1201  05F3  2DF9               	goto	l994
  1202  05F4                     u480:
  1203  05F4                     l992:
  1204  05F4  09F0               	comf	___awmod@divisor,f
  1205  05F5  09F1               	comf	___awmod@divisor+1,f
  1206  05F6  0AF0               	incf	___awmod@divisor,f
  1207  05F7  1903               	skipnz
  1208  05F8  0AF1               	incf	___awmod@divisor+1,f
  1209  05F9                     l994:
  1210  05F9  0870               	movf	___awmod@divisor,w
  1211  05FA  0471               	iorwf	___awmod@divisor+1,w
  1212  05FB  1903               	btfsc	3,2
  1213  05FC  2DFE               	goto	u491
  1214  05FD  2DFF               	goto	u490
  1215  05FE                     u491:
  1216  05FE  2E2E               	goto	l1012
  1217  05FF                     u490:
  1218  05FF                     l996:
  1219  05FF  01F4               	clrf	___awmod@counter
  1220  0600  0AF4               	incf	___awmod@counter,f
  1221  0601  2E0D               	goto	l1002
  1222  0602                     l998:
  1223  0602  3001               	movlw	1
  1224  0603                     u505:
  1225  0603  1003               	clrc
  1226  0604  0DF0               	rlf	___awmod@divisor,f
  1227  0605  0DF1               	rlf	___awmod@divisor+1,f
  1228  0606  3EFF               	addlw	-1
  1229  0607  1D03               	skipz
  1230  0608  2E03               	goto	u505
  1231  0609                     l1000:
  1232  0609  3001               	movlw	1
  1233  060A  00FF               	movwf	btemp+1
  1234  060B  087F               	movf	btemp+1,w
  1235  060C  07F4               	addwf	___awmod@counter,f
  1236  060D                     l1002:
  1237  060D  1FF1               	btfss	___awmod@divisor+1,7
  1238  060E  2E10               	goto	u511
  1239  060F  2E11               	goto	u510
  1240  0610                     u511:
  1241  0610  2E02               	goto	l998
  1242  0611                     u510:
  1243  0611                     l1004:
  1244  0611  0871               	movf	___awmod@divisor+1,w
  1245  0612  0273               	subwf	___awmod@dividend+1,w
  1246  0613  1D03               	skipz
  1247  0614  2E17               	goto	u525
  1248  0615  0870               	movf	___awmod@divisor,w
  1249  0616  0272               	subwf	___awmod@dividend,w
  1250  0617                     u525:
  1251  0617  1C03               	skipc
  1252  0618  2E1A               	goto	u521
  1253  0619  2E1B               	goto	u520
  1254  061A                     u521:
  1255  061A  2E21               	goto	l1008
  1256  061B                     u520:
  1257  061B                     l1006:
  1258  061B  0870               	movf	___awmod@divisor,w
  1259  061C  02F2               	subwf	___awmod@dividend,f
  1260  061D  0871               	movf	___awmod@divisor+1,w
  1261  061E  1C03               	skipc
  1262  061F  03F3               	decf	___awmod@dividend+1,f
  1263  0620  02F3               	subwf	___awmod@dividend+1,f
  1264  0621                     l1008:
  1265  0621  3001               	movlw	1
  1266  0622                     u535:
  1267  0622  1003               	clrc
  1268  0623  0CF1               	rrf	___awmod@divisor+1,f
  1269  0624  0CF0               	rrf	___awmod@divisor,f
  1270  0625  3EFF               	addlw	-1
  1271  0626  1D03               	skipz
  1272  0627  2E22               	goto	u535
  1273  0628                     l1010:
  1274  0628  3001               	movlw	1
  1275  0629  02F4               	subwf	___awmod@counter,f
  1276  062A  1D03               	btfss	3,2
  1277  062B  2E2D               	goto	u541
  1278  062C  2E2E               	goto	u540
  1279  062D                     u541:
  1280  062D  2E11               	goto	l1004
  1281  062E                     u540:
  1282  062E                     l1012:
  1283  062E  0875               	movf	___awmod@sign,w
  1284  062F  1903               	btfsc	3,2
  1285  0630  2E32               	goto	u551
  1286  0631  2E33               	goto	u550
  1287  0632                     u551:
  1288  0632  2E38               	goto	l1016
  1289  0633                     u550:
  1290  0633                     l1014:
  1291  0633  09F2               	comf	___awmod@dividend,f
  1292  0634  09F3               	comf	___awmod@dividend+1,f
  1293  0635  0AF2               	incf	___awmod@dividend,f
  1294  0636  1903               	skipnz
  1295  0637  0AF3               	incf	___awmod@dividend+1,f
  1296  0638                     l1016:
  1297  0638  0873               	movf	___awmod@dividend+1,w
  1298  0639  00F1               	movwf	?___awmod+1
  1299  063A  0872               	movf	___awmod@dividend,w
  1300  063B  00F0               	movwf	?___awmod
  1301  063C                     l334:
  1302  063C  0008               	return
  1303  063D                     __end_of___awmod:
  1304                           
  1305                           	psect	text5
  1306  063D                     __ptext5:	
  1307 ;; *************** function ___awdiv *****************
  1308 ;; Defined at:
  1309 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\awdiv.c"
  1310 ;; Parameters:    Size  Location     Type
  1311 ;;  divisor         2    0[COMMON] int 
  1312 ;;  dividend        2    2[COMMON] int 
  1313 ;; Auto vars:     Size  Location     Type
  1314 ;;  quotient        2    6[COMMON] int 
  1315 ;;  sign            1    5[COMMON] unsigned char 
  1316 ;;  counter         1    4[COMMON] unsigned char 
  1317 ;; Return value:  Size  Location     Type
  1318 ;;                  2    0[COMMON] int 
  1319 ;; Registers used:
  1320 ;;		wreg, status,2, status,0, btemp+1
  1321 ;; Tracked objects:
  1322 ;;		On entry : 0/0
  1323 ;;		On exit  : 0/0
  1324 ;;		Unchanged: 0/0
  1325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1326 ;;      Params:         4       0       0       0       0
  1327 ;;      Locals:         4       0       0       0       0
  1328 ;;      Temps:          0       0       0       0       0
  1329 ;;      Totals:         8       0       0       0       0
  1330 ;;Total ram usage:        8 bytes
  1331 ;; Hardware stack levels used:    1
  1332 ;; This function calls:
  1333 ;;		Nothing
  1334 ;; This function is called by:
  1335 ;;		_main
  1336 ;; This function uses a non-reentrant model
  1337 ;;
  1338                           
  1339                           
  1340                           ;psect for function ___awdiv
  1341  063D                     ___awdiv:
  1342  063D                     l938:	
  1343                           ;incstack = 0
  1344                           ; Regs used in ___awdiv: [wreg+status,2+status,0+btemp+1]
  1345                           
  1346  063D  01F5               	clrf	___awdiv@sign
  1347  063E                     l940:
  1348  063E  1FF1               	btfss	___awdiv@divisor+1,7
  1349  063F  2E41               	goto	u371
  1350  0640  2E42               	goto	u370
  1351  0641                     u371:
  1352  0641  2E49               	goto	l946
  1353  0642                     u370:
  1354  0642                     l942:
  1355  0642  09F0               	comf	___awdiv@divisor,f
  1356  0643  09F1               	comf	___awdiv@divisor+1,f
  1357  0644  0AF0               	incf	___awdiv@divisor,f
  1358  0645  1903               	skipnz
  1359  0646  0AF1               	incf	___awdiv@divisor+1,f
  1360  0647                     l944:
  1361  0647  01F5               	clrf	___awdiv@sign
  1362  0648  0AF5               	incf	___awdiv@sign,f
  1363  0649                     l946:
  1364  0649  1FF3               	btfss	___awdiv@dividend+1,7
  1365  064A  2E4C               	goto	u381
  1366  064B  2E4D               	goto	u380
  1367  064C                     u381:
  1368  064C  2E56               	goto	l952
  1369  064D                     u380:
  1370  064D                     l948:
  1371  064D  09F2               	comf	___awdiv@dividend,f
  1372  064E  09F3               	comf	___awdiv@dividend+1,f
  1373  064F  0AF2               	incf	___awdiv@dividend,f
  1374  0650  1903               	skipnz
  1375  0651  0AF3               	incf	___awdiv@dividend+1,f
  1376  0652                     l950:
  1377  0652  3001               	movlw	1
  1378  0653  00FF               	movwf	btemp+1
  1379  0654  087F               	movf	btemp+1,w
  1380  0655  06F5               	xorwf	___awdiv@sign,f
  1381  0656                     l952:
  1382  0656  01F6               	clrf	___awdiv@quotient
  1383  0657  01F7               	clrf	___awdiv@quotient+1
  1384  0658                     l954:
  1385  0658  0870               	movf	___awdiv@divisor,w
  1386  0659  0471               	iorwf	___awdiv@divisor+1,w
  1387  065A  1903               	btfsc	3,2
  1388  065B  2E5D               	goto	u391
  1389  065C  2E5E               	goto	u390
  1390  065D                     u391:
  1391  065D  2E95               	goto	l974
  1392  065E                     u390:
  1393  065E                     l956:
  1394  065E  01F4               	clrf	___awdiv@counter
  1395  065F  0AF4               	incf	___awdiv@counter,f
  1396  0660  2E6C               	goto	l962
  1397  0661                     l958:
  1398  0661  3001               	movlw	1
  1399  0662                     u405:
  1400  0662  1003               	clrc
  1401  0663  0DF0               	rlf	___awdiv@divisor,f
  1402  0664  0DF1               	rlf	___awdiv@divisor+1,f
  1403  0665  3EFF               	addlw	-1
  1404  0666  1D03               	skipz
  1405  0667  2E62               	goto	u405
  1406  0668                     l960:
  1407  0668  3001               	movlw	1
  1408  0669  00FF               	movwf	btemp+1
  1409  066A  087F               	movf	btemp+1,w
  1410  066B  07F4               	addwf	___awdiv@counter,f
  1411  066C                     l962:
  1412  066C  1FF1               	btfss	___awdiv@divisor+1,7
  1413  066D  2E6F               	goto	u411
  1414  066E  2E70               	goto	u410
  1415  066F                     u411:
  1416  066F  2E61               	goto	l958
  1417  0670                     u410:
  1418  0670                     l964:
  1419  0670  3001               	movlw	1
  1420  0671                     u425:
  1421  0671  1003               	clrc
  1422  0672  0DF6               	rlf	___awdiv@quotient,f
  1423  0673  0DF7               	rlf	___awdiv@quotient+1,f
  1424  0674  3EFF               	addlw	-1
  1425  0675  1D03               	skipz
  1426  0676  2E71               	goto	u425
  1427  0677  0871               	movf	___awdiv@divisor+1,w
  1428  0678  0273               	subwf	___awdiv@dividend+1,w
  1429  0679  1D03               	skipz
  1430  067A  2E7D               	goto	u435
  1431  067B  0870               	movf	___awdiv@divisor,w
  1432  067C  0272               	subwf	___awdiv@dividend,w
  1433  067D                     u435:
  1434  067D  1C03               	skipc
  1435  067E  2E80               	goto	u431
  1436  067F  2E81               	goto	u430
  1437  0680                     u431:
  1438  0680  2E88               	goto	l970
  1439  0681                     u430:
  1440  0681                     l966:
  1441  0681  0870               	movf	___awdiv@divisor,w
  1442  0682  02F2               	subwf	___awdiv@dividend,f
  1443  0683  0871               	movf	___awdiv@divisor+1,w
  1444  0684  1C03               	skipc
  1445  0685  03F3               	decf	___awdiv@dividend+1,f
  1446  0686  02F3               	subwf	___awdiv@dividend+1,f
  1447  0687                     l968:
  1448  0687  1476               	bsf	___awdiv@quotient,0
  1449  0688                     l970:
  1450  0688  3001               	movlw	1
  1451  0689                     u445:
  1452  0689  1003               	clrc
  1453  068A  0CF1               	rrf	___awdiv@divisor+1,f
  1454  068B  0CF0               	rrf	___awdiv@divisor,f
  1455  068C  3EFF               	addlw	-1
  1456  068D  1D03               	skipz
  1457  068E  2E89               	goto	u445
  1458  068F                     l972:
  1459  068F  3001               	movlw	1
  1460  0690  02F4               	subwf	___awdiv@counter,f
  1461  0691  1D03               	btfss	3,2
  1462  0692  2E94               	goto	u451
  1463  0693  2E95               	goto	u450
  1464  0694                     u451:
  1465  0694  2E70               	goto	l964
  1466  0695                     u450:
  1467  0695                     l974:
  1468  0695  0875               	movf	___awdiv@sign,w
  1469  0696  1903               	btfsc	3,2
  1470  0697  2E99               	goto	u461
  1471  0698  2E9A               	goto	u460
  1472  0699                     u461:
  1473  0699  2E9F               	goto	l978
  1474  069A                     u460:
  1475  069A                     l976:
  1476  069A  09F6               	comf	___awdiv@quotient,f
  1477  069B  09F7               	comf	___awdiv@quotient+1,f
  1478  069C  0AF6               	incf	___awdiv@quotient,f
  1479  069D  1903               	skipnz
  1480  069E  0AF7               	incf	___awdiv@quotient+1,f
  1481  069F                     l978:
  1482  069F  0877               	movf	___awdiv@quotient+1,w
  1483  06A0  00F1               	movwf	?___awdiv+1
  1484  06A1  0876               	movf	___awdiv@quotient,w
  1485  06A2  00F0               	movwf	?___awdiv
  1486  06A3                     l321:
  1487  06A3  0008               	return
  1488  06A4                     __end_of___awdiv:
  1489                           
  1490                           	psect	text6
  1491  0575                     __ptext6:	
  1492 ;; *************** function _LcdPrint *****************
  1493 ;; Defined at:
  1494 ;;		line 68 in file "main.c"
  1495 ;; Parameters:    Size  Location     Type
  1496 ;;  message         2    3[COMMON] PTR unsigned char 
  1497 ;;		 -> STR_1(6), humi(14), temp(14), 
  1498 ;; Auto vars:     Size  Location     Type
  1499 ;;  i               1    5[COMMON] unsigned char 
  1500 ;; Return value:  Size  Location     Type
  1501 ;;                  1    wreg      void 
  1502 ;; Registers used:
  1503 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1504 ;; Tracked objects:
  1505 ;;		On entry : 0/0
  1506 ;;		On exit  : 0/0
  1507 ;;		Unchanged: 0/0
  1508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1509 ;;      Params:         2       0       0       0       0
  1510 ;;      Locals:         1       0       0       0       0
  1511 ;;      Temps:          0       0       0       0       0
  1512 ;;      Totals:         3       0       0       0       0
  1513 ;;Total ram usage:        3 bytes
  1514 ;; Hardware stack levels used:    1
  1515 ;; Hardware stack levels required when called:    1
  1516 ;; This function calls:
  1517 ;;		_LcdDataWrite
  1518 ;; This function is called by:
  1519 ;;		_main
  1520 ;; This function uses a non-reentrant model
  1521 ;;
  1522                           
  1523                           
  1524                           ;psect for function _LcdPrint
  1525  0575                     _LcdPrint:
  1526  0575                     l888:	
  1527                           ;incstack = 0
  1528                           ; Regs used in _LcdPrint: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1529                           
  1530                           
  1531                           ;main.c: 68: void LcdPrint(char* message);main.c: 69: {;main.c: 70:     for(char i = 0; 
      +                          message[i] != '\0'; i++)
  1532  0575  01F5               	clrf	LcdPrint@i
  1533  0576  2D8C               	goto	l894
  1534  0577                     l890:
  1535                           
  1536                           ;main.c: 71:     {;main.c: 72:         LcdDataWrite(message[i]);
  1537  0577  0875               	movf	LcdPrint@i,w
  1538  0578  0773               	addwf	LcdPrint@message,w
  1539  0579  0084               	movwf	4
  1540  057A  0874               	movf	LcdPrint@message+1,w
  1541  057B  1803               	skipnc
  1542  057C  0A74               	incf	LcdPrint@message+1,w
  1543  057D  00FF               	movwf	btemp+1
  1544  057E  120A  118A  2003  120A  118A  	fcall	stringtab
  1545  0583  120A  118A  24DE  120A  118A  	fcall	_LcdDataWrite
  1546  0588                     l892:
  1547                           
  1548                           ;main.c: 73:     }
  1549  0588  3001               	movlw	1
  1550  0589  00FF               	movwf	btemp+1
  1551  058A  087F               	movf	btemp+1,w
  1552  058B  07F5               	addwf	LcdPrint@i,f
  1553  058C                     l894:
  1554  058C  0875               	movf	LcdPrint@i,w
  1555  058D  0773               	addwf	LcdPrint@message,w
  1556  058E  0084               	movwf	4
  1557  058F  0874               	movf	LcdPrint@message+1,w
  1558  0590  1803               	skipnc
  1559  0591  0A74               	incf	LcdPrint@message+1,w
  1560  0592  1283               	bcf	3,5	;RP0=0, select bank0
  1561  0593  1303               	bcf	3,6	;RP1=0, select bank0
  1562  0594  00FF               	movwf	btemp+1
  1563  0595  120A  118A  2003  120A  118A  	fcall	stringtab
  1564  059A  3A00               	xorlw	0
  1565  059B  1D03               	skipz
  1566  059C  2D9E               	goto	u291
  1567  059D  2D9F               	goto	u290
  1568  059E                     u291:
  1569  059E  2D77               	goto	l890
  1570  059F                     u290:
  1571  059F                     l28:
  1572  059F  0008               	return
  1573  05A0                     __end_of_LcdPrint:
  1574                           
  1575                           	psect	text7
  1576  04DE                     __ptext7:	
  1577 ;; *************** function _LcdDataWrite *****************
  1578 ;; Defined at:
  1579 ;;		line 58 in file "main.c"
  1580 ;; Parameters:    Size  Location     Type
  1581 ;;  data            1    wreg     unsigned char 
  1582 ;; Auto vars:     Size  Location     Type
  1583 ;;  data            1    2[COMMON] unsigned char 
  1584 ;; Return value:  Size  Location     Type
  1585 ;;                  1    wreg      void 
  1586 ;; Registers used:
  1587 ;;		wreg, status,2, status,0, btemp+1
  1588 ;; Tracked objects:
  1589 ;;		On entry : 0/0
  1590 ;;		On exit  : 0/0
  1591 ;;		Unchanged: 0/0
  1592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1593 ;;      Params:         0       0       0       0       0
  1594 ;;      Locals:         1       0       0       0       0
  1595 ;;      Temps:          2       0       0       0       0
  1596 ;;      Totals:         3       0       0       0       0
  1597 ;;Total ram usage:        3 bytes
  1598 ;; Hardware stack levels used:    1
  1599 ;; This function calls:
  1600 ;;		Nothing
  1601 ;; This function is called by:
  1602 ;;		_LcdPrint
  1603 ;; This function uses a non-reentrant model
  1604 ;;
  1605                           
  1606                           
  1607                           ;psect for function _LcdDataWrite
  1608  04DE                     _LcdDataWrite:
  1609                           
  1610                           ;incstack = 0
  1611                           ; Regs used in _LcdDataWrite: [wreg+status,2+status,0+btemp+1]
  1612                           ;LcdDataWrite@data stored from wreg
  1613  04DE  00F2               	movwf	LcdDataWrite@data
  1614  04DF                     l868:
  1615                           
  1616                           ;main.c: 58: void LcdDataWrite(char data);main.c: 59: {;main.c: 60:     PORTB = data;
  1617  04DF  0872               	movf	LcdDataWrite@data,w
  1618  04E0  1283               	bcf	3,5	;RP0=0, select bank0
  1619  04E1  1303               	bcf	3,6	;RP1=0, select bank0
  1620  04E2  0086               	movwf	6	;volatile
  1621  04E3                     l870:
  1622                           
  1623                           ;main.c: 61:     PORTD |= (1<<0);
  1624  04E3  1408               	bsf	8,0	;volatile
  1625  04E4                     l872:
  1626                           
  1627                           ;main.c: 62:     PORTD &= ~(1<<1);
  1628  04E4  30FD               	movlw	253
  1629  04E5  00FF               	movwf	btemp+1
  1630  04E6  087F               	movf	btemp+1,w
  1631  04E7  0588               	andwf	8,f	;volatile
  1632  04E8                     l874:
  1633                           
  1634                           ;main.c: 63:     PORTD |= (1<<2);
  1635  04E8  1508               	bsf	8,2	;volatile
  1636  04E9                     l876:
  1637                           
  1638                           ;main.c: 64:     _delay((unsigned long)((10)*(8000000/4000.0)));
  1639  04E9  301A               	movlw	26
  1640  04EA  00F1               	movwf	??_LcdDataWrite+1
  1641  04EB  30F8               	movlw	248
  1642  04EC  00F0               	movwf	??_LcdDataWrite
  1643  04ED                     u617:
  1644  04ED  0BF0               	decfsz	??_LcdDataWrite,f
  1645  04EE  2CED               	goto	u617
  1646  04EF  0BF1               	decfsz	??_LcdDataWrite+1,f
  1647  04F0  2CED               	goto	u617
  1648  04F1  0000               	nop
  1649                           
  1650                           ;main.c: 65:     PORTD &= ~(1<<2);
  1651  04F2  30FB               	movlw	251
  1652  04F3  00FF               	movwf	btemp+1
  1653  04F4  087F               	movf	btemp+1,w
  1654  04F5  1283               	bcf	3,5	;RP0=0, select bank0
  1655  04F6  1303               	bcf	3,6	;RP1=0, select bank0
  1656  04F7  0588               	andwf	8,f	;volatile
  1657  04F8                     l22:
  1658  04F8  0008               	return
  1659  04F9                     __end_of_LcdDataWrite:
  1660                           
  1661                           	psect	text8
  1662  0530                     __ptext8:	
  1663 ;; *************** function _LcdCmdWrite *****************
  1664 ;; Defined at:
  1665 ;;		line 40 in file "main.c"
  1666 ;; Parameters:    Size  Location     Type
  1667 ;;  cmd             1    wreg     unsigned char 
  1668 ;; Auto vars:     Size  Location     Type
  1669 ;;  cmd             1    2[COMMON] unsigned char 
  1670 ;; Return value:  Size  Location     Type
  1671 ;;                  1    wreg      void 
  1672 ;; Registers used:
  1673 ;;		wreg, status,2, status,0, btemp+1
  1674 ;; Tracked objects:
  1675 ;;		On entry : 0/0
  1676 ;;		On exit  : 0/0
  1677 ;;		Unchanged: 0/0
  1678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1679 ;;      Params:         0       0       0       0       0
  1680 ;;      Locals:         1       0       0       0       0
  1681 ;;      Temps:          2       0       0       0       0
  1682 ;;      Totals:         3       0       0       0       0
  1683 ;;Total ram usage:        3 bytes
  1684 ;; Hardware stack levels used:    1
  1685 ;; This function calls:
  1686 ;;		Nothing
  1687 ;; This function is called by:
  1688 ;;		_main
  1689 ;; This function uses a non-reentrant model
  1690 ;;
  1691                           
  1692                           
  1693                           ;psect for function _LcdCmdWrite
  1694  0530                     _LcdCmdWrite:
  1695                           
  1696                           ;incstack = 0
  1697                           ; Regs used in _LcdCmdWrite: [wreg+status,2+status,0+btemp+1]
  1698                           ;LcdCmdWrite@cmd stored from wreg
  1699  0530  00F2               	movwf	LcdCmdWrite@cmd
  1700  0531                     l878:
  1701                           
  1702                           ;main.c: 40: void LcdCmdWrite(char cmd);main.c: 41: {;main.c: 42:     PORTB = cmd;
  1703  0531  0872               	movf	LcdCmdWrite@cmd,w
  1704  0532  1283               	bcf	3,5	;RP0=0, select bank0
  1705  0533  1303               	bcf	3,6	;RP1=0, select bank0
  1706  0534  0086               	movwf	6	;volatile
  1707  0535                     l880:
  1708                           
  1709                           ;main.c: 43:     PORTD &= ~(1<<0);
  1710  0535  30FE               	movlw	254
  1711  0536  00FF               	movwf	btemp+1
  1712  0537  087F               	movf	btemp+1,w
  1713  0538  0588               	andwf	8,f	;volatile
  1714  0539                     l882:
  1715                           
  1716                           ;main.c: 44:     PORTD &= ~(1<<1);
  1717  0539  30FD               	movlw	253
  1718  053A  00FF               	movwf	btemp+1
  1719  053B  087F               	movf	btemp+1,w
  1720  053C  0588               	andwf	8,f	;volatile
  1721  053D                     l884:
  1722                           
  1723                           ;main.c: 45:     PORTD |= (1<<2);
  1724  053D  1508               	bsf	8,2	;volatile
  1725                           
  1726                           ;main.c: 46:     _delay((unsigned long)((10)*(8000000/4000.0)));
  1727  053E  301A               	movlw	26
  1728  053F  00F1               	movwf	??_LcdCmdWrite+1
  1729  0540  30F8               	movlw	248
  1730  0541  00F0               	movwf	??_LcdCmdWrite
  1731  0542                     u627:
  1732  0542  0BF0               	decfsz	??_LcdCmdWrite,f
  1733  0543  2D42               	goto	u627
  1734  0544  0BF1               	decfsz	??_LcdCmdWrite+1,f
  1735  0545  2D42               	goto	u627
  1736  0546  0000               	nop
  1737  0547                     l886:
  1738                           
  1739                           ;main.c: 47:     PORTD &= ~(1<<2);
  1740  0547  30FB               	movlw	251
  1741  0548  00FF               	movwf	btemp+1
  1742  0549  087F               	movf	btemp+1,w
  1743  054A  1283               	bcf	3,5	;RP0=0, select bank0
  1744  054B  1303               	bcf	3,6	;RP1=0, select bank0
  1745  054C  0588               	andwf	8,f	;volatile
  1746  054D                     l19:
  1747  054D  0008               	return
  1748  054E                     __end_of_LcdCmdWrite:
  1749  007E                     btemp	set	126	;btemp
  1750  007E                     wtemp0	set	126
  1751                           
  1752                           	psect	config
  1753                           
  1754                           ;Config register CONFIG @ 0x2007
  1755                           ;	Oscillator Selection bits
  1756                           ;	FOSC = XT, XT oscillator
  1757                           ;	Watchdog Timer Enable bit
  1758                           ;	WDTE = OFF, WDT disabled
  1759                           ;	Power-up Timer Enable bit
  1760                           ;	PWRTE = ON, PWRT enabled
  1761                           ;	Brown-out Reset Enable bit
  1762                           ;	BOREN = ON, BOR enabled
  1763                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1764                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1765                           ;	Data EEPROM Memory Code Protection bit
  1766                           ;	CPD = OFF, Data EEPROM code protection off
  1767                           ;	Flash Program Memory Write Enable bits
  1768                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1769                           ;	In-Circuit Debugger Mode bit
  1770                           ;	DEBUG = 0x1, unprogrammed default
  1771                           ;	Flash Program Memory Code Protection bit
  1772                           ;	CP = OFF, Code protection off
  1773  2007                     	org	8199
  1774  2007  3F71               	dw	16241

Data Sizes:
    Strings     6
    Constant    0
    Data        28
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      13
    BANK0            80     10      40
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LcdPrint@message	PTR unsigned char  size(2) Largest target is 14
		 -> STR_1(CODE[6]), humi(BANK0[14]), temp(BANK0[14]), 


Critical Paths under _main in COMMON

    _main->___awdiv
    _LcdPrint->_LcdDataWrite

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0    1985
                                              0 BANK0     10    10      0
                        _LcdCmdWrite
                           _LcdPrint
                            ___awdiv
                            ___awmod
                      _checkResponse
                           _readData
                        _startSignal
 ---------------------------------------------------------------------------------
 (1) _startSignal                                          2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _readData                                             4     4      0     115
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _checkResponse                                        2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     600
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     908
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _LcdPrint                                             3     1      2     340
                                              3 COMMON     3     1      2
                       _LcdDataWrite
 ---------------------------------------------------------------------------------
 (2) _LcdDataWrite                                         3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _LcdCmdWrite                                          3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LcdCmdWrite
   _LcdPrint
     _LcdDataWrite
   ___awdiv
   ___awmod
   _checkResponse
   _readData
   _startSignal

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      A      28       5       50.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      35      12        0.0%
ABS                  0      0      35       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Fri Jun 05 20:57:44 2020

                      pc 0002      __end_of_LcdCmdWrite 054E                       l22 04F8  
                     l19 054D                       l28 059F                       l47 0513  
                     l72 05E3                       l59 0574     __end_of_LcdDataWrite 04F9  
           ___awdiv@sign 0075                       fsr 0004              _startSignal 04F9  
  __end_of_checkResponse 0575                      l321 06A3                      l334 063C  
                    l900 0508                      l910 0568                      l902 0510  
                    l904 054E                      l920 05B0                      l912 05A0  
                    l906 054E                      l930 05D8                      l922 05B5  
                    l940 063E                      l908 055C                      l932 05DC  
                    l924 05C3                      l870 04E3                      l950 0652  
                    l942 0642                      l934 05E2                      l926 05C6  
                    l918 05A2                      l880 0535                      l872 04E4  
                    l960 0668                      l952 0656                      l944 0647  
                    l928 05CC                      l882 0539                      l874 04E8  
                    l890 0577                      l970 0688                      l962 066C  
                    l954 0658                      l946 0649                      l938 063D  
                    l884 053D                      l876 04E9                      l868 04DF  
                    l892 0588                      l972 068F                      l964 0670  
                    l956 065E                      l948 064D                      l886 0547  
                    l878 0531                      l894 058C                      l966 0681  
                    l958 0661                      l974 0695                      l990 05F0  
                    l982 05E4                      l888 0575                      l976 069A  
                    l968 0687                      l992 05F4                      l984 05E5  
                    l896 04F9                      l978 069F                      l994 05F9  
                    l986 05E9                      l898 04FF                      l996 05FF  
                    l988 05EE                      l998 0602                      _RD3 0043  
                    u300 055C                      u301 055B                      u310 0568  
                    u311 0567                      u320 0574                      u321 0573  
                    u410 0670                      u330 05B0                      u411 066F  
                    u331 05AF                      u340 05C3                      u405 0662  
                    u341 05C2                      u430 0681                      u510 0611  
                    u350 05D8                      u431 0680                      u511 0610  
                    u351 05D7                      u520 061B                      u360 05E2  
                    u425 0671                      u521 061A                      u505 0603  
                    u361 05E1                      u290 059F                      u450 0695  
                    u370 0642                      u291 059E                      u451 0694  
                    u435 067D                      u371 0641                      u460 069A  
                    u380 064D                      u540 062E                      u461 0699  
                    u445 0689                      u381 064C                      u541 062D  
                    u525 0617                      u390 065E                      u550 0633  
                    u470 05E9                      u391 065D                      u551 0632  
                    u535 0622                      u471 05E8                      u607 05B2  
                    u480 05F4                      u560 0710                      u617 04ED  
                    u481 05F3                      u561 070F                      u490 05FF  
                    u627 0542                      u491 05FE                      u565 070C  
                    u577 07DD                      u587 0503                      u597 050D  
                    fsr0 0004                      indf 0000             ___awmod@sign 0075  
                   l1000 0609                     l1010 0628                     l1002 060D  
                   l1004 0611                     l1012 062E                     l1020 06A4  
                   l1014 0633                     l1006 061B                     l1030 06BE  
                   l1022 06A8                     l1016 0638                     l1008 0621  
                   l1040 06E6                     l1032 06C6                     l1024 06AE  
                   l1050 07AD                     l1042 0710                     l1034 06CE  
                   l1026 06B4                     l1060 07D5                     l1052 07B3  
                   l1044 079A                     l1036 06D6                     l1028 06B9  
                   l1046 079E                     l1054 07BD                     l1038 06DE  
                   l1056 07C9                     l1048 07A4                     l1058 07D2  
                   STR_1 0013         LcdDataWrite@data 0072                     _main 06A4  
                   _humi 0020                     _temp 002E                     btemp 007E  
                   start 0000                    ?_main 0070          __end_of___awdiv 06A4  
        __end_of___awmod 063D          ___awdiv@divisor 0070          ___awdiv@counter 0074  
                  _PORTB 0006                    _PORTD 0008                    _TRISB 0086  
                  _TRISD 0088                    pclath 000A                    status 0003  
                  wtemp0 007E              _LcdCmdWrite 0530         __end_of_LcdPrint 05A0  
        __initialization 07E7             __end_of_main 07E7                   ??_main 003C  
       ___awdiv@dividend 0072                   _TMR1ON 0080                   _TRISD3 0443  
  __size_of_LcdDataWrite 001B                ??___awdiv 0074                ??___awmod 0074  
       __end_of_readData 05E4         ___awdiv@quotient 0076          ___awmod@divisor 0070  
        ___awmod@counter 0074             _LcdDataWrite 04DE  __end_of__initialization 07FC  
         __pcstackCOMMON 0070             __pidataBANK0 0514             ?_startSignal 0070  
              ?_LcdPrint 0073               __pbssBANK0 0046               __pmaintext 06A4  
           readData@data 0073          LcdPrint@message 0073               ??_LcdPrint 0075  
             __stringtab 0003                ?_readData 0070   __size_of_checkResponse 0027  
           ?_LcdCmdWrite 0070                  ___awdiv 063D                  ___awmod 05E4  
                __ptext1 04F9                  __ptext2 05A0                  __ptext3 054E  
                __ptext4 05E4                  __ptext5 063D                  __ptext6 0575  
                __ptext7 04DE                  __ptext8 0530         ___awmod@dividend 0072  
                _t_byte1 007C                  _t_byte2 007B     end_of_initialization 07FC  
             ??_readData 0070                LcdPrint@i 0075            _checkResponse 054E  
   __size_of_startSignal 001B           LcdCmdWrite@cmd 0072           ?_checkResponse 0070  
    start_initialization 07E7        __size_of_LcdPrint 002B     __size_of_LcdCmdWrite 001E  
             init_fetch0 04CB              __pdataBANK0 0020              __pbssCOMMON 0078  
              ___latbits 0002            __pcstackBANK0 003C                _check_sum 0078  
      __size_of_readData 0044                 ?___awdiv 0070                 ?___awmod 0070  
        ??_checkResponse 0070                __pstrings 0003              __stringbase 0012  
               _LcdPrint 0575            ?_LcdDataWrite 0070                readData@i 0072  
       __size_of___awdiv 0067         __size_of___awmod 0059            ??_startSignal 0070  
     __end_of__stringtab 0013           ??_LcdDataWrite 0070                 _readData 05A0  
          __size_of_main 0143                 _rh_byte1 007A                 _rh_byte2 0079  
               _time_out 0046      __end_of_startSignal 0514                 init_ram0 04CF  
          ??_LcdCmdWrite 0070                stringcode 000D                 stringdir 000D  
               stringtab 0003  
